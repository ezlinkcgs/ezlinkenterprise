#include <sqlca.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ezbusiness/ezposdbtypes.h>

int readEzPOSMCCInfo( int I_MCC, struct EzPOSMCCInfo *posmccinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		int MCC;
		char Description[ 33 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR Description IS STRING(33);
	
	memset( Description, 0, sizeof( Description ) );
	MCC = I_MCC;
	
	EXEC SQL SELECT
		RTRIM(DESCRIPTION)
	INTO
		:Description
	FROM EZPOSMCCINFO WHERE MCC=:MCC;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	posmccinfo_rec->MCC = MCC;
	strcpy( posmccinfo_rec->Description, Description );
	return sqlca.sqlcode;
}

int readEzPOSMerchantTypeInfo( const char *I_MerchantType, struct EzPOSMerchantTypeInfo *posmerchanttypeinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char MerchantType[ 17 ];
		char Description[ 33 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR MerchantType IS STRING(17);
	EXEC SQL VAR Description IS STRING(33);
	
	memset( MerchantType, 0, sizeof( MerchantType ) );
	memset( Description, 0, sizeof( Description ) );
	
	strcpy( MerchantType, I_MerchantType );
	
	EXEC SQL SELECT
		RTRIM(DESCRIPTION)
	INTO
		:Description
	FROM EZPOSMERCHANTTYPEINFO WHERE RTRIM(MERCHANTTYPE)=:MerchantType;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
		
	strcpy( posmerchanttypeinfo_rec->Description, Description );
	return sqlca.sqlcode;
}

int readEzPOSMerchantInfo( const char *I_MerchantId, struct EzPOSMerchantInfo *posmerchantinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char MerchantId[ 16 ];
		char MerchantType[ 17 ];
		char MerchantName[ 33 ];
		char MCCList[ 129 ];
		char TxnList[ 65 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR MerchantType IS STRING(17);
	EXEC SQL VAR MerchantName IS STRING(33);
	EXEC SQL VAR MCCList IS STRING(129);
	EXEC SQL VAR TxnList IS STRING(65);
	
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( MerchantType, 0, sizeof( MerchantType ) );
	memset( MerchantName, 0, sizeof( MerchantName ) );
	memset( MCCList, 0, sizeof( MCCList ) );
	memset( TxnList, 0, sizeof( TxnList ) );
	
	strcpy( MerchantId, I_MerchantId );
	
	EXEC SQL SELECT
		RTRIM(INSTID),
		RTRIM(MERCHANTID),
		RTRIM(MERCHANTTYPE),
		RTRIM(MERCHANTNAME),
		RTRIM(MCCLIST),
		RTRIM(TXNLIST)
	INTO
		:InstId,
		:MerchantId,
		:MerchantType,
		:MerchantName,
		:MCCList,
		:TxnList
	FROM EZPOSMERCHANTINFO WHERE RTRIM(MERCHANTID)=:MerchantId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( posmerchantinfo_rec->InstId, InstId );
	strcpy( posmerchantinfo_rec->MerchantId, MerchantId );
	strcpy( posmerchantinfo_rec->MerchantType, MerchantType );
	strcpy( posmerchantinfo_rec->MerchantName, MerchantName );
	strcpy( posmerchantinfo_rec->MCCList, MCCList );	
	strcpy( posmerchantinfo_rec->TxnList, TxnList );
	return sqlca.sqlcode;
}

int readEzPOSTerminalTypeInfo( const char *I_TerminalType, struct EzPOSTerminalTypeInfo *posterminaltypeinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char TerminalType[ 17 ];
		char Description[ 33 ];
		char TxnCodeGroupId[ 17 ];
		char RespCodeGroupId[ 17 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR TerminalType IS STRING(33);
	EXEC SQL VAR Description IS STRING(33);
	EXEC SQL VAR TxnCodeGroupId IS STRING(33);
	EXEC SQL VAR RespCodeGroupId IS STRING(33);
	
	memset( TerminalType, 0, sizeof( TerminalType ) );
	memset( Description, 0, sizeof( Description ) );
	memset( TxnCodeGroupId, 0, sizeof( TxnCodeGroupId ) );
	memset( RespCodeGroupId, 0, sizeof( RespCodeGroupId ) );
	
	strcpy( TerminalType, I_TerminalType );
	
	EXEC SQL SELECT
		RTRIM(DESCRIPTION),
		RTRIM(TXNCODEGROUPID),
		RTRIM(RESPCODEGROUPID)
	INTO
		:Description,
		:TxnCodeGroupId,
		:RespCodeGroupId
	FROM EZPOSTERMINALTYPEINFO WHERE RTRIM(TERMINALTYPE)=:TerminalType;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posterminaltypeinfo_rec->TerminalType, TerminalType );
	strcpy( posterminaltypeinfo_rec->TxnCodeGroupId, TxnCodeGroupId );
	strcpy( posterminaltypeinfo_rec->RespCodeGroupId, RespCodeGroupId );
	strcpy( posterminaltypeinfo_rec->Description, Description );
	return sqlca.sqlcode;
}

int readEzPOSTerminalInfo( const char *I_POSId, struct EzPOSTerminalInfo *posterminalinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char POSId[ 33 ];
		char InstId[ 13 ];
		char TerminalId[ 9 ];
		char MerchantId[ 16 ];
		int MCC;
		char TermMasterKey[ 49 ];
		char TermPINKey[ 49 ];
		char TermMACKey[ 49 ];
		char TerminalLocation[ 33 ];
		char TerminalType[ 17 ];
		char TerminalStatus;
		char StoreId[ 33 ];
		char AcquirerCode[ 13 ];
		int CurrencyCode;
		int CountryCode;
		int PinCapCode;
		char BatchId[ 13 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR POSId IS STRING(33);
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR TerminalId IS STRING(9);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR TermMasterKey IS STRING(49);
	EXEC SQL VAR TermPINKey IS STRING(49);
	EXEC SQL VAR TermMACKey IS STRING(49);
	EXEC SQL VAR TerminalLocation IS STRING(33);
	EXEC SQL VAR TerminalType IS STRING(17);
	EXEC SQL VAR StoreId IS STRING(33);
	EXEC SQL VAR AcquirerCode IS STRING(13);
	EXEC SQL VAR BatchId IS STRING(13);
	
	memset( POSId, 0, sizeof( POSId ) );
	memset( InstId, 0, sizeof( InstId ) );
	memset( TerminalId, 0, sizeof( TerminalId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( TermMasterKey, 0, sizeof( TermMasterKey ) );
	memset( TermPINKey, 0, sizeof( TermPINKey ) );
	memset( TermMACKey, 0, sizeof( TermMACKey ) );
	memset( TerminalLocation, 0, sizeof( TerminalLocation ) );
	memset( TerminalType, 0, sizeof( TerminalType ) );
	memset( StoreId, 0, sizeof( StoreId ) );
	memset( AcquirerCode, 0, sizeof( AcquirerCode ) );
	memset( BatchId, 0, sizeof( BatchId ) );
	
	strcpy( POSId, I_POSId );
	
	EXEC SQL SELECT
		RTRIM(INSTID),
		RTRIM(TERMINALID),
		RTRIM(MERCHANTID),
		MCC,
		RTRIM(TERMMASTERKEY),
		RTRIM(TERMPINKEY),
		RTRIM(TERMMACKEY),
		RTRIM(TERMINALLOCATION),
		RTRIM(TERMINALTYPE),
		TERMINALSTATUS,
		RTRIM(STOREID),
		RTRIM(ACQUIRERCODE),
		CURRENCYCODE,
		COUNTRYCODE,
		PINCAPCODE,
		RTRIM(BATCHID)
	INTO
		:InstId,
		:TerminalId,
		:MerchantId,
		:MCC,
		:TermMasterKey,
		:TermPINKey,
		:TermMACKey,
		:TerminalLocation,
		:TerminalType,
		:TerminalStatus,
		:StoreId,
		:AcquirerCode,
		:CurrencyCode,
		:CountryCode,
		:PinCapCode,
		:BatchId
	FROM EZPOSTERMINALINFO WHERE RTRIM(POSID)=:POSId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posterminalinfo_rec->POSId, POSId );
	strcpy( posterminalinfo_rec->TerminalId, TerminalId );
	strcpy( posterminalinfo_rec->MerchantId, MerchantId );
	posterminalinfo_rec->MCC = MCC;
	strcpy( posterminalinfo_rec->TermMasterKey, TermMasterKey );
	strcpy( posterminalinfo_rec->TermPINKey, TermPINKey );
	strcpy( posterminalinfo_rec->TermMACKey, TermMACKey );
	strcpy( posterminalinfo_rec->TerminalLocation, TerminalLocation );
	strcpy( posterminalinfo_rec->TerminalType, TerminalType );
	posterminalinfo_rec->TerminalStatus = TerminalStatus;
	strcpy( posterminalinfo_rec->StoreId, StoreId );
	strcpy( posterminalinfo_rec->AcquirerCode, AcquirerCode );
	posterminalinfo_rec->CurrencyCode = CurrencyCode;
	posterminalinfo_rec->CountryCode = CountryCode;
	posterminalinfo_rec->PinCapCode = PinCapCode;
	strcpy( posterminalinfo_rec->BatchId, BatchId );
	
	return sqlca.sqlcode;
}

int readEzPOSStoreInfo( const char *I_StoreId, struct EzPOSStoreInfo *posstoreinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char StoreId[ 33 ];
		char MerchantId[ 16 ];
		char StoreName[ 33 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR StoreId IS STRING(33);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR StoreName IS STRING(33);
	
	memset( InstId, 0, sizeof( InstId ) );
	memset( StoreId, 0, sizeof( StoreId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( StoreName, 0, sizeof( StoreName ) );
	
	strcpy( StoreId, I_StoreId );
	
	EXEC SQL SELECT
		RTRIM(INSTID),
		RTRIM(MERCHANTID),
		RTRIM(STORENAME)
	INTO
		:InstId,
		:MerchantId,
		:StoreName
	FROM EZPOSSTOREINFO WHERE RTRIM(STOREID)=:StoreId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posstoreinfo_rec->InstId, InstId );
	strcpy( posstoreinfo_rec->StoreId, StoreId );
	strcpy( posstoreinfo_rec->MerchantId, MerchantId );
	strcpy( posstoreinfo_rec->StoreName, StoreName );
	
	return sqlca.sqlcode;
}

int readEzPOSTxnInfo( const char *I_TxnCodeGroupId, struct EzPOSTxnInfo *postxninfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char TxnCodeGroupId[ 17 ];
		char TxnCodeList[ 129 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR TxnCodeGroupId IS STRING(17);
	EXEC SQL VAR TxnCodeList IS STRING(129);
	
	memset( TxnCodeGroupId, 0, sizeof( TxnCodeGroupId ) );
	memset( TxnCodeList, 0, sizeof( TxnCodeList ) );
	
	strcpy( TxnCodeGroupId, I_TxnCodeGroupId );
	
	EXEC SQL SELECT
		RTRIM(TXNCODELIST)
	INTO
		:TxnCodeList
	FROM EZPOSTXNINFO WHERE RTRIM(TXNCODEGROUPID)=:TxnCodeGroupId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( postxninfo_rec->TxnCodeGroupId, TxnCodeGroupId );
	strcpy( postxninfo_rec->TxnCodeList, TxnCodeList );
	
	return sqlca.sqlcode;
}

int readEzPOSRespCodeInfo( const char *I_RecordId, struct EzPOSRespCodeInfo *posrespcodeinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char RecordId[ 17 ];
		char RespCodeGroupId[ 17 ];
		short RespCode;
		short POSRespCode;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR RecordId IS STRING(17);
	EXEC SQL VAR RespCodeGroupId IS STRING(17);
	
	memset( RecordId, 0, sizeof( RecordId ) );
	memset( RespCodeGroupId, 0, sizeof( RespCodeGroupId ) );
		
	strcpy( RecordId, I_RecordId );
	
	EXEC SQL SELECT
		RTRIM(RESPCODEGROUPID),
		RESPCODE,
		POSRESPCODE
	INTO
		:RespCodeGroupId,
		:RespCode,
		:POSRespCode
	FROM EZPOSRESPCODEINFO WHERE RTRIM(RECORDID)=:RecordId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posrespcodeinfo_rec->RecordId, RecordId );
	strcpy( posrespcodeinfo_rec->RespCodeGroupId, RespCodeGroupId );
	posrespcodeinfo_rec->RespCode = RespCode;
	posrespcodeinfo_rec->POSRespCode = POSRespCode;
	
	return sqlca.sqlcode;
}

int readEzPOSInBoundProperty( const char *I_RecordId, struct EzPOSInBoundProperty *posinboundproperty_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char RecordId[ 17 ];
		char MsgType[ 5 ];
		char TxnCode[ 7 ];
		char MsgFlag;
		char MsgProcessFlag;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR RecordId IS STRING(17);
	EXEC SQL VAR MsgType IS STRING(5);
	EXEC SQL VAR TxnCode IS STRING(7);
	
	memset( RecordId, 0, sizeof( RecordId ) );
	memset( MsgType, 0, sizeof( MsgType ) );
	memset( TxnCode, 0, sizeof( TxnCode ) );
		
	strcpy( RecordId, I_RecordId );
	
	EXEC SQL SELECT
		RTRIM(MSGTYPE),
		RTRIM(TXNCODE),
		MSGFLAG,
		MSGPROCESSFLAG
	INTO
		:MsgType,
		:TxnCode,
		:MsgFlag,
		:MsgProcessFlag
	FROM EZPOSINBOUNDPROPERTY WHERE RTRIM(RECORDID)=:RecordId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posinboundproperty_rec->RecordId, RecordId );
	strcpy( posinboundproperty_rec->MsgType, MsgType );
	strcpy( posinboundproperty_rec->TxnCode, TxnCode );
	posinboundproperty_rec->MsgFlag = MsgFlag;
	posinboundproperty_rec->MsgProcessFlag = MsgProcessFlag;
	
	return sqlca.sqlcode;
}

int readEzPOSRouteSelect( const char *I_RouteSelectId, struct EzPOSRouteSelect *posrouteselect_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char RouteSelectId[ 17 ];
		char ChannelName[ 33 ];
		char MsgTranslateId[ 17 ];
		char LogFlag;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR RouteSelectId IS STRING(17);
	EXEC SQL VAR ChannelName IS STRING(33);
	EXEC SQL VAR MsgTranslateId IS STRING(17);
	
	memset( RouteSelectId, 0, sizeof( RouteSelectId ) );
	memset( ChannelName, 0, sizeof( ChannelName ) );
	memset( MsgTranslateId, 0, sizeof( MsgTranslateId ) );
		
	strcpy( RouteSelectId, I_RouteSelectId );
	
	EXEC SQL SELECT
		RTRIM(CHANNELNAME),
		RTRIM(MSGTRANSLATEID),
		LOGFLAG
	INTO
		:ChannelName,
		:MsgTranslateId,
		:LogFlag
	FROM EZPOSROUTESELECT WHERE RTRIM(ROUTESELECTID)=:RouteSelectId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posrouteselect_rec->RouteSelectId, RouteSelectId );
	strcpy( posrouteselect_rec->ChannelName, ChannelName );
	strcpy( posrouteselect_rec->MsgTranslateId, MsgTranslateId );
	posrouteselect_rec->LogFlag = LogFlag;
	
	return sqlca.sqlcode;
}

int readEzPOSMsgTranslate( const char *I_MsgTranslateId, struct EzPOSMsgTranslate *posmsgtranslate_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char MsgTranslateId[ 17 ];
		char TranslateDesc[ 256 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR MsgTranslateId IS STRING(17);
	EXEC SQL VAR TranslateDesc IS STRING(256);
		
	memset( MsgTranslateId, 0, sizeof( MsgTranslateId ) );
	memset( TranslateDesc, 0, sizeof( TranslateDesc ) );
			
	strcpy( MsgTranslateId, I_MsgTranslateId );
	
	EXEC SQL SELECT
		RTRIM(TRANSLATEDESC)
	INTO
		:TranslateDesc
	FROM EZPOSMSGTRANSLATE WHERE RTRIM(MSGTRANSLATEID)=:MsgTranslateId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posmsgtranslate_rec->MsgTranslateId, MsgTranslateId );
	strcpy( posmsgtranslate_rec->TranslateDesc, TranslateDesc );
	
	return sqlca.sqlcode;
}

int readEzPOSRouteInfo( const char *I_RecordId, struct EzPOSRouteInfo *posrouteinfo_rec )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char RecordId[ 129 ];
		char InstId[ 13 ];
		char TerminalType[ 17 ];
		char MsgType[ 65 ];
		char TxnCode[ 129 ];
		char RespCode[ 65 ];
		char RouteExp1[ 129 ];
		int RouteExpPriority1;
		char RouteExp2[ 129 ];
		int RouteExpPriority2;
		char ChannelName[ 65 ];
		char RouteSelectList[ 129 ];
		char DebugFlag;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR RecordId IS STRING(129);
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR TerminalType IS STRING(17);
	EXEC SQL VAR MsgType IS STRING(65);
	EXEC SQL VAR TxnCode IS STRING(129);
	EXEC SQL VAR RespCode IS STRING(65);
	EXEC SQL VAR RouteExp1 IS STRING(129);
	EXEC SQL VAR RouteExp2 IS STRING(129);
	EXEC SQL VAR ChannelName IS STRING(65);
	EXEC SQL VAR RouteSelectList IS STRING(129);
	
	memset( RecordId, 0, sizeof( RecordId ) );
	memset( InstId, 0, sizeof( InstId ) );
	memset( TerminalType, 0, sizeof( TerminalType ) );
	memset( MsgType, 0, sizeof( MsgType ) );
	memset( TxnCode, 0, sizeof( TxnCode ) );
	memset( RespCode, 0, sizeof( RespCode ) );
	memset( RouteExp1, 0, sizeof( RouteExp1 ) );
	memset( RouteExp2, 0, sizeof( RouteExp2 ) );
	memset( ChannelName, 0, sizeof( ChannelName ) );
	memset( RouteSelectList, 0, sizeof( RouteSelectList ) );
		
	strcpy( RecordId, I_RecordId );
	
	EXEC SQL SELECT
		RTRIM(INSTID),
		RTRIM(TERMINALTYPE),
		RTRIM(MSGTYPE),
		RTRIM(TXNCODE),
		RTRIM(RESPCODE),
		RTRIM(ROUTEEXP1),
		ROUTEEXPPRIORITY1,
		RTRIM(ROUTEEXP2),
		ROUTEEXPPRIORITY2,
		RTRIM(CHANNELNAME),
		RTRIM(ROUTESELECTLIST)
		DEBUGFLAG
	INTO
		:InstId,
		:TerminalType,
		:MsgType,
		:TxnCode,
		:RespCode,
		:RouteExp1,
		:RouteExpPriority1,
		:RouteExp2,
		:RouteExpPriority2,
		:ChannelName,
		:RouteSelectList,
		:DebugFlag
	FROM EZPOSROUTEINFO WHERE RTRIM(RECORDID)=:RecordId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;

	strcpy( posrouteinfo_rec->RecordId, RecordId );
	strcpy( posrouteinfo_rec->InstId, InstId );
	strcpy( posrouteinfo_rec->TerminalType, TerminalType );
	strcpy( posrouteinfo_rec->MsgType, MsgType );
	strcpy( posrouteinfo_rec->TxnCode, TxnCode );
	strcpy( posrouteinfo_rec->RespCode, RespCode );
	strcpy( posrouteinfo_rec->RouteExp1, RouteExp1 );
	posrouteinfo_rec->RouteExpPriority1 = RouteExpPriority1;
	strcpy( posrouteinfo_rec->RouteExp2, RouteExp2 );
	posrouteinfo_rec->RouteExpPriority2 = RouteExpPriority2;
	strcpy( posrouteinfo_rec->ChannelName, ChannelName );
	strcpy( posrouteinfo_rec->RouteSelectList, RouteSelectList );
	posrouteinfo_rec->DebugFlag = DebugFlag;
		
	return sqlca.sqlcode;
}




