#include <ezbusiness/ezmobile8583.h>
#include <ezbusiness/ezdevwrapper.h>
#include <ezlink/ezauthdb.h>
#include <ezutils/ezdbcfg.h>
#include <ezutils/ezcfg.h>
#include <string.h>
#include <ctype.h>
#include <eztasktools.h>
#include <stdlib.h>
#include <errno.h>
#include <time.h>

EzMobile8583 :: EzMobile8583( ezdebug * adbg ) : FmtUtil( adbg )
{
	dbg = adbg;
} 

EzMobile8583 :: ~EzMobile8583()
{
}

bool EzMobile8583 :: IsBlankLine( const char *line_str )
{
        for( int i = 0; i < strlen( line_str ); i++ )
        {
                if( ( line_str[ i ] != ' ' ) && ( line_str[ i ] != '\t' ) && ( line_str[ i ] != '\n' ) )
                        return false;
        }
        return true;
}

int EzMobile8583 :: GetLine( const char *LineBuffer, char *RowStr )
{
        for( int i = 0, j = 0; i < strlen( LineBuffer ); i++, j++ )
        {
                if( LineBuffer[ i ] == '\n' )
                        break;
                else
                        RowStr[ j ] = LineBuffer[ i ];
        }
        return 1;
}

int EzMobile8583 :: GetString( const char *LineBuffer, char *ColStr, int Column )
{
        int j = 0;
        bool FoundChar = true;

        int FldCount = 0;

        for( int i = 0; i < strlen( LineBuffer ); i++ )
        {
                if( ( LineBuffer[ i ] != ' ' ) && ( LineBuffer[ i ] != '\t' ) && ( LineBuffer[ i ] != '\n' ) )
                {
                        if( FoundChar )
                                FldCount++;
                        FoundChar = false;
                        if( FldCount == Column )
                        {
                                ColStr[ j ] = LineBuffer[ i ];
                                j++;
                        }
                }
                else
                {
                        FoundChar = true;
                        if( FldCount == Column )
                                break;
                }
        }
        return 1;
}

 
int EzMobile8583 :: InitDriver( string DBname )
{
	int ret ;
	string DBUserName, DBPassWord, DBName ;
	char GroupHndlrPipe[65], BitMapPath[ 150 ];

	ISOPipe = new EzPipe( "Mobile8583Handler" );
	dbg->trace( NORMAL, "Mobile8583Handler Pipe got created...\n" );

	if ( GetDBUserDetails( DBName, DBUserName, DBPassWord ) < 0 )
	{
		dbg->trace( NORMAL, "Unable to get the details from the config\n" );
		return -1;
	}

	if ( ( ret = ConnectDB( ( char * ) DBUserName.c_str(), ( char * ) DBPassWord.c_str() , ( char * ) DBName.c_str() ) ) < 0 )
		dbg->trace( NORMAL, "Unable to connect with DB [ORA%04d]\n", ret );
	else
		dbg->trace( NORMAL, "Connected with Database successfully\n" );

	memset( BitMapPath, 0, sizeof( BitMapPath ) );
        sprintf( BitMapPath, "%s/%s/%s/%s", getenv( "EZDIR" ), "cfg", "iso8583", "mobilebitmap.cfg" );
        LoadBitmap( BitMapPath );
                        
        dbg->trace( NORMAL, "Bitmap initialised from [%s/cfg/iso8583/mobilebitmap.cfg]\n", getenv( "EZDIR" ) );

	return 1;
}


int EzMobile8583 :: LoadBitmap( char * bitmap_file )
{
        FILE *fptr;
        BitmapInfo BInfo ; 
        bool found = false;
        char LineStr[ 150 ], RowStr[ 150 ], ColStr[ 50 ];
        memset( &BInfo, 0, sizeof( BitmapInfo ) );
        fptr = fopen( bitmap_file, "r" );

        if( fptr == NULL )
        {
                dbg->trace( NORMAL, "Error in opening File[%s]\n", bitmap_file );
                return -1;
        }

        memset( &BInfo, 0, sizeof( BitmapInfo ) );
        BInfo.MsgType=200;

        found = false;

        while( !feof( fptr ) )
        {
                memset( LineStr, 0, sizeof( LineStr ) );
                fgets( LineStr, sizeof( LineStr ), fptr );
                if( IsBlankLine( LineStr ) )
                        continue;
                memset( RowStr, 0, sizeof( RowStr ) );
                GetLine( LineStr, RowStr );

                //dbg->trace( NORMAL, "LineStr[%s] RowStr[%s]\n", LineStr, RowStr );
                if( !strcasecmp( RowStr, "group 200" ) )
                {
                        found = true;
                        continue;
                }
                if( ( found ) && ( !strcasecmp( RowStr, "end group" ) ) )
                        break;
                if( found )
		{
                        memset( ColStr, 0, sizeof( ColStr ) );
                        GetString( RowStr, ColStr, 1 );
                        if( atoi( ColStr ) <= 64 )
                                SetBitOn( BInfo.PrimaryBitmap, atoi( ColStr ) );
                        else
                                SetBitOn( BInfo.SecondaryBitmap, ( atoi( ColStr ) - 64 ) );
                }
        }

        if( !found )
                return -1;

        ISOBitmapTable.insert( make_pair( BInfo.MsgType, BInfo ) );

        found = false;

        memset( &BInfo, 0, sizeof( BitmapInfo ) );
        BInfo.MsgType=210;

        found = false;
        rewind( fptr );
        while( !feof( fptr ) )
        {
                memset( LineStr, 0, sizeof( LineStr ) );
                fgets( LineStr, sizeof( LineStr ), fptr );
                if( IsBlankLine( LineStr ) )
                        continue;
                memset( RowStr, 0, sizeof( RowStr ) );
                GetLine( LineStr, RowStr );
		if( !strcasecmp( RowStr, "group 210" ) )
                {
                        found = true;
                        continue;
                }

                if( ( found ) && ( !strcasecmp( RowStr, "end group" ) ) )
                        break;
                if( found )
                {
                        memset( ColStr, 0, sizeof( ColStr ) );
                        GetString( RowStr, ColStr, 1 );
                        if( atoi( ColStr ) <= 64 )
                                SetBitOn( BInfo.PrimaryBitmap, atoi( ColStr ) );
                        else
                                SetBitOn( BInfo.SecondaryBitmap, ( atoi( ColStr ) - 64 ) );
                }
        }
        if( !found )
                return -1;

        ISOBitmapTable.insert( make_pair( BInfo.MsgType, BInfo ) );

        found = false;

        memset( &BInfo, 0, sizeof( BitmapInfo ) );
        BInfo.MsgType=800;

        rewind( fptr );
        while( !feof( fptr ) )
        {
                memset( LineStr, 0, sizeof( LineStr ) );
                fgets( LineStr, sizeof( LineStr ), fptr );
                if( IsBlankLine( LineStr ) )
                        continue;
                memset( RowStr, 0, sizeof( RowStr ) );
		GetLine( LineStr, RowStr );

                //dbg->trace( NORMAL, "LineStr[%s] RowStr[%s]\n", LineStr, RowStr );

                if( !strcasecmp( RowStr, "group 800" ) )
                {
                        found = true;
                        continue;
                }

                if( ( found ) && ( !strcasecmp( RowStr, "end group" ) ) )
                        break;
                if( found )
                {
                        memset( ColStr, 0, sizeof( ColStr ) );
                        GetString( RowStr, ColStr, 1 );
                        if( atoi( ColStr ) <= 64 )
                                SetBitOn( BInfo.PrimaryBitmap, atoi( ColStr ) );
                        else
                                SetBitOn( BInfo.SecondaryBitmap, ( atoi( ColStr ) - 64 ) );
                }
        }
        if( !found )
                return -1;

        ISOBitmapTable.insert( make_pair( BInfo.MsgType, BInfo ) );

        found = false;
        memset( &BInfo, 0, sizeof( BitmapInfo ) );
        BInfo.MsgType=810;
	 rewind( fptr );
        while( !feof( fptr ) )
        {
                memset( LineStr, 0, sizeof( LineStr ) );
                fgets( LineStr, sizeof( LineStr ), fptr );
                if( IsBlankLine( LineStr ) )
                        continue;
                memset( RowStr, 0, sizeof( RowStr ) );
                GetLine( LineStr, RowStr );

                //dbg->trace( NORMAL, "LineStr[%s] RowStr[%s]\n", LineStr, RowStr );

                if( !strcasecmp( RowStr, "group 810" ) )
                {
                        found = true;
                        continue;
                }

                if( ( found ) && ( !strcasecmp( RowStr, "end group" ) ) )
                        break;
                if( found )
                {
                        memset( ColStr, 0, sizeof( ColStr ) );
                        GetString( RowStr, ColStr, 1 );
                        if( atoi( ColStr ) <= 64 )
                                SetBitOn( BInfo.PrimaryBitmap, atoi( ColStr ) );
                        else
                                SetBitOn( BInfo.SecondaryBitmap, ( atoi( ColStr ) - 64 ) );
                }
        }
        if( !found )
                return -1;

        ISOBitmapTable.insert( make_pair( BInfo.MsgType, BInfo ) );
        return 0;
}		

int EzMobile8583 :: ServiceRequests()
{
	EzDevWrapper DevWrapper ;
	char MsgBuf[ 1024 ];
		
	for(;;)
	{
		if( ISOPipe->RcvMsg( ( char * ) &DevWrapper, sizeof( DevWrapper ) ) < 0 )
		{
			dbg->trace( NORMAL, "Connection with PipeMgr is Broken\n" );
                        exit(0);
		}
		GroupHandlerPipeName = ISOPipe->SrcPipe() ;
		dbg->trace( NORMAL, "Received an Request from [%s]\n", ISOPipe->SrcPipe() );
		dbg->trace( NORMAL, "Group Handler Pipe Name [%s]\n", GroupHandlerPipeName.c_str() ); 
		dbg->hex_dump( ( unsigned char * ) DevWrapper.MsgBuf, DevWrapper.MsgSize ) ;
		dbg->trace( NORMAL, "Message is from Device [%s]\n", DevWrapper.DevicePipeName );
		if ( DevWrapper.CmdCode == DECOMPOSE_REQUEST )
		{
			memset( MsgBuf, 0, sizeof( MsgBuf ) );
			memcpy( MsgBuf, DevWrapper.MsgBuf, DevWrapper.MsgSize );
			DiagnizeAndServeNetworkRequest( MsgBuf, DevWrapper.MsgSize, DevWrapper.DevicePipeName ); 
		}
		else if ( DevWrapper.CmdCode == COMPOSE_REQUEST )
			DiagnizeAndServeAppRequest( DevWrapper.MsgBuf, DevWrapper.MsgSize, DevWrapper.DevicePipeName ); 
	}
}


int EzMobile8583:: DiagnizeAndServeNetworkRequest( char * MsgBuf, int MsgSize, char * DevicePipeName )
{
	int size ;
	EzMsg DevMsg ;
	EzDevWrapper DevWrapper ;
	char XMsg[512];
	
	dbg->trace( NORMAL, "Servicing Network request [%s]\n",MsgBuf );
	
	memset( &DevMsg, 0, sizeof( EzMsg ) );
	size = DecomposeISOMessage( MsgBuf, &DevMsg, DevicePipeName ); 
	dbg->trace( NORMAL, "Size of the Msg[%d]", size);

	if (size > 0 )
	{
		memset( &DevWrapper, 0, sizeof( EzDevWrapper ) );
		DevWrapper.CmdCode = DECOMPOSE_RESPONSE ;
		DevWrapper.MsgSize = sizeof( EzMsg ) ;
		if ( DevMsg.MsgId == NETWORK_TXN_REQUEST )
			strcpy( DevMsg.DeviceId, DevicePipeName );
		strcpy( DevWrapper.DevicePipeName, DevicePipeName );
		memcpy( DevWrapper.MsgBuf, &DevMsg, sizeof( EzMsg ) );

		if( ISOPipe->SendMsg( GroupHandlerPipeName.c_str(), &DevWrapper, sizeof( EzDevWrapper ) ) < 0 )
			dbg->trace( NORMAL, "Error in Sending Message from Mobile8583...SysErr[%s] ErrNo[%d]\n", strerror( errno ), errno );
		else
			dbg->trace( NORMAL, "Message Sent Successfully from Mobile8583\n");
	}
	return -1;
}

int EzMobile8583 :: GetNAccounts( const char *msg )
{
        int cnt = 0;
	for( int i = 0; i < strlen( msg ); i++ )
	{
		if( msg[ i ] == 0x1c )
	        	cnt++;
        }
	return cnt;
}

void EzMobile8583 :: getToken( const char *msg, char *tmp, char ch, int count )
{
  	int i = 0, j = 0, cnt = 0;
	for( i = 0; i < strlen( msg ); i++ )
	{
		if( msg[ i ] == ch )
			cnt++;
	        else if( cnt == count )
	        	break;
		else if ( cnt + 1 == count )
		{
			tmp[ j ] = msg[ i ];
		        j++;
		}
	}
}

int EzMobile8583:: DiagnizeAndServeAppRequest( char * MsgBuf, int MsgSize, char * DevicePipeName )
{
	int size ;
	EzMsg DevMsg ;
	EzDevWrapper DevWrapper ;

	char XMsg[1024];
	memset( XMsg, 0, sizeof( XMsg ) );
	dbg->trace( NORMAL, "Servicing Application request\n" );
	memset( &DevMsg, 0, sizeof( DevMsg ) );
	memcpy( &DevMsg, MsgBuf, sizeof( DevMsg ) );

	if(DevMsg.MsgId = NETWORK_TXN_RESPONSE)
	{
		size = ComposeRespMsg( DevMsg, XMsg);
		
	}
	else 
		dbg->trace( NORMAL,"<Unsupported MSG TYPE>");
	
	dbg->hex_dump( ( unsigned char * ) XMsg, size );
	memset( &DevWrapper, 0, sizeof( EzDevWrapper ) );
	DevWrapper.CmdCode = COMPOSE_RESPONSE ;
	DevWrapper.MsgSize = size ;
	strcpy( DevWrapper.DevicePipeName, DevicePipeName );
	memcpy( DevWrapper.MsgBuf, XMsg, size );

	ISOPipe->SendMsg( GroupHandlerPipeName.c_str(), &DevWrapper, sizeof( EzDevWrapper ) );
}

int EzMobile8583:: ComposeRespMsg( EzMsg Devmsg, char * ResMsg)
{
	char MobileNumber[25];
	memset(MobileNumber,0,sizeof(MobileNumber));
	dbg->trace( NORMAL, "Mobile Number Length[%d]\n",strlen(Devmsg.txnmsg.TermLocation) );

	strncpy(MobileNumber,Devmsg.txnmsg.TermLocation,13);
	dbg->trace( NORMAL, "Mobile Number Length[%s]\n",MobileNumber );
	dbg->trace( NORMAL, "Composing the Response Message[%d]\n",Devmsg.txnmsg.MsgType );
	memset( ResMsg , 0, sizeof(ResMsg));
	
	if (Devmsg.txnmsg.Response == 0 )
	{
		
			switch(Devmsg.txnmsg.TxnCode)
			{
				case 301000:
					sprintf( ResMsg, "%s%c%s%s%s%12s%s%c%s", MobileNumber, 0x1c, "The available balance for the A/C NO", Devmsg.txnmsg.FromAccount, " is ", Devmsg.txnmsg.AvailBalance, "\r\n Powered by HMA ", 0x1c, "0" );
					break;
				case 302000:
					sprintf( ResMsg, "%s%c%s%s%s%12s%s%c%s", MobileNumber, 0x1c, "The available balance for the A/C NO", Devmsg.txnmsg.FromAccount, " is ", Devmsg.txnmsg.AvailBalance, "\r\n Powered by HMA ", 0x1c, "0" );
					break;
				case 921000:
					sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The Statement request transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed", "\r\n Powered by HMA ", 0x1c, "0" );
					break;
				case 922000:
					sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The Statement request transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed" , "\r\n Powered by HMA ", 0x1c, "0" );
					break;
			
				case 481000:
					sprintf( ResMsg, "%s%c%s%s%s%d%s%c%s", MobileNumber, 0x1c, "The Cheque Status Inquiry transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed. Cheque is honoured on " ,Devmsg.txnmsg.IdDate, "\r\n Powered by HMA ", 0x1c, "0" );
					break;

				case 482000:
					sprintf( ResMsg, "%s%c%s%s%s%d%s%c%s", MobileNumber, 0x1c, "The Cheque Status Inquiry transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed. Cheque is honoured on " ,Devmsg.txnmsg.IdDate, "\r\n Powered by HMA ", 0x1c, "0" );
					break;
					
				case 491000:
					sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The  Stop Payment transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed.Stop Payment Request Recieved." , "\r\n Powered by HMA ", 0x1c, "0" );
					break;
					
				case 492000:
					sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The  Stop Payment transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed.Stop Payment Request Recieved." , "\r\n Powered by HMA ", 0x1c, "0" );
					break;
			}
	}
	else if (Devmsg.txnmsg.Response == 05 ) 
			sprintf( ResMsg, "%s%c%s%s%c%s", MobileNumber, 0x1c, "Requested Information could not be retrived,Please try latter ", "\r\n Powered by HMA ", 0x1c, "0" );
	
	else if (Devmsg.txnmsg.Response == 07 ) 
			sprintf( ResMsg, "%s%c%s%s%c%s", MobileNumber, 0x1c, "This is not a  Registered Mobile number ,Try with your Registered Mobile number ", "\r\n Powered by HMA ", 0x1c, "0" );
	
	else if (Devmsg.txnmsg.Response == 14 ) 
			sprintf( ResMsg, "%s%c%s%s%c%s", MobileNumber, 0x1c, "Requested Information could not be retrived, This is a Invalid Card  ", "\r\n Powered by HMA ", 0x1c, "0" );

	else if (Devmsg.txnmsg.Response == 501 )
			sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The Cheque Status Inquiry transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed.Cheque is Dishonoured" , "\r\n Powered by HMA ", 0x1c, "0" );

	
	else if (Devmsg.txnmsg.Response == 502 )
			sprintf( ResMsg, "%s%c%s%s%s%s%c%s", MobileNumber, 0x1c, "The Cheque Status Inquiry transaction for the A/C NO", Devmsg.txnmsg.FromAccount, " is sucussfully completed.Cheque yet not recieved." , "\r\n Powered by HMA ", 0x1c, "0" );
	
	else if (Devmsg.txnmsg.Response == 503 ) 
			sprintf( ResMsg, "%s%c%s%s%c%s", MobileNumber, 0x1c, "Other Reason, Contact Branch.  ", "\r\n Powered by HMA ", 0x1c, "0" );
	/*
		case 55://Invalid pin
			sprintf( ResMsg, "%s%c%s%s%c%s", Devmsg.txnmsg.TermLocation, 0x1c, "Sorry ,Unable to process your Transaction.Please try again latter", "\r\n Powered by HMA ", 0x1c, "0" );
			break;
		case 41://EZLINK_RC_HotCard  				 41
		case 51://EZLINK_RC_NoFunds    		         51
		case 54://EZLINK_RC_ExpiredCard              54
		case 238://EZLINK_RC_InsufficientFunds        238	
		case 75://EZLINK_RC_ExceedsPINRetry          75
		*/
	return strlen(ResMsg);
	
}

int EzMobile8583 :: ComposeISOMessage( int MsgType, EzMsg devMsg, char * OutBuf )
{
	map<int,BitmapInfo> :: iterator BitmapIterator ;
	char bitmap[8], * offset ;
	int len , amount , bit , CurrencyCode = 356 ;
	char AddRespData[ 100 ], TmpStr[ 100 ], DateStr[ 10 ];
	string CommKey;

	dbg->trace( NORMAL, "Composing the ISO Message\n" );
	offset = OutBuf ;

	OutBuf += fmt_out( OutBuf, ( char * )"ISO031000076", CHAR, 12, 0 );
	OutBuf += fmt_out( OutBuf, &MsgType, ITOA, 4, 0 );

	BitmapIterator = ISOBitmapTable.find( MsgType ) ;
	if ( BitmapIterator == ISOBitmapTable.end() )
	{	
		dbg->trace( NORMAL, "Unable to find the bitmap for the message type [%d]\n", devMsg.txnmsg.MsgType );
		return -1;
	}

	//SetBitOn( ( unsigned char * ) BitmapIterator->second.SecondaryBitmap, 39   ); 

	if( devMsg.txnmsg.Response != 0 )
	{
		SetBitOff( BitmapIterator->second.PrimaryBitmap, 44 );
		SetBitOff( BitmapIterator->second.SecondaryBitmap, 38 );
		SetBitOff( BitmapIterator->second.SecondaryBitmap, 39 );
	}

	if( MsgType  == 810 )
		SetBitOn( BitmapIterator->second.PrimaryBitmap, 59 );

	if( ( devMsg.txnmsg.Response == 0 ) && ( devMsg.txnmsg.TxnCode / 10000  == 36 ) )
		SetBitOn( BitmapIterator->second.SecondaryBitmap, 63 );
	else
		SetBitOff( BitmapIterator->second.SecondaryBitmap, 63 );

	if( ( devMsg.txnmsg.Response == 0 ) && ( devMsg.txnmsg.TxnCode / 10000  == 30 ) )
		SetBitOn( BitmapIterator->second.PrimaryBitmap, 44 );
	
	if( ( devMsg.txnmsg.Response == 0 ) && ( devMsg.txnmsg.TxnCode / 10000  == 38 ) )
		SetBitOn( BitmapIterator->second.SecondaryBitmap, 63 );

	OutBuf += fmt_out( OutBuf, ( unsigned char* )BitmapIterator->second.PrimaryBitmap, HTOA, 16, 1 ); 
	memcpy( bitmap, BitmapIterator->second.PrimaryBitmap , 8 );

	for( int Ind=0; Ind < 128 ; Ind++ )
	{
		if ( Ind == 64 )
		{
			if ( ! IsBitSet( ( unsigned char * ) BitmapIterator->second.PrimaryBitmap, 1 ) )
				break ;
			memcpy( bitmap, BitmapIterator->second.SecondaryBitmap, 8 );
		}

		if ( Ind >= 64 )
			bit = (Ind+1) - 64 ;
		else
			bit = (Ind+1 );

		if ( !IsBitSet( ( unsigned char * ) bitmap, bit  ) )
			continue;

		switch( (Ind+1 ) )
		{
			case 1:
				OutBuf += fmt_out( OutBuf, ( unsigned char *)BitmapIterator->second.SecondaryBitmap, HTOA, 16, Ind + 1); 
				break ;

			case 2:
				len = strlen( devMsg.txnmsg.chn );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.chn, CHAR, len, Ind + 1 );
				break ;

			case 3:
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.TxnCode, LTOA, 6, Ind + 1 );
				break ;

			case 4:
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.Amount, CHAR, 12, Ind + 1 );
				break ;

			case 7:	
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.TranDate, LTOA, 4, Ind + 1 );
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.TranTime, LTOA, 6, Ind + 1 );
				break ;

			case 11:
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.TraceNo, LTOA, 6, Ind + 1 );
				break ;

			case 12:
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.LocalTime, LTOA, 6, Ind + 1 );
				break;
			
			case 13:
				memset( TmpStr, 0, sizeof( TmpStr ) );
				sprintf( TmpStr, "%06d", devMsg.txnmsg.LocalDate );
				memset( DateStr, 0, sizeof( DateStr ) );
				strncpy( DateStr, TmpStr + 2, 2 );
				strncpy( DateStr + 2, TmpStr, 2 ); 
				OutBuf += fmt_out( OutBuf, DateStr, CHAR, 4, Ind + 1 );
				break ;
			
			case 15:	
				memset( TmpStr, 0, sizeof( TmpStr ) );
				sprintf( TmpStr, "%06d", devMsg.txnmsg.LocalDate );
				memset( DateStr, 0, sizeof( DateStr ) );
				strncpy( DateStr, TmpStr + 2, 2 );
				strncpy( DateStr + 2, TmpStr, 2 ); 
				OutBuf += fmt_out( OutBuf, DateStr, CHAR, 4, Ind + 1 );
				break ;
			
			case 17:
				memset( TmpStr, 0, sizeof( TmpStr ) );
				sprintf( TmpStr, "%06d", devMsg.txnmsg.LocalDate );
				memset( DateStr, 0, sizeof( DateStr ) );
				strncpy( DateStr, TmpStr + 2, 2 );
				strncpy( DateStr + 2, TmpStr, 2 ); 
				OutBuf += fmt_out( OutBuf, DateStr, CHAR, 4, Ind + 1 );
				break ;
			
			case 18:
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.Merchant, STOA, 4, Ind + 1 );
				break;

			case 32:
				len = strlen( devMsg.txnmsg.AcquirerInst );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.AcquirerInst, CHAR, len, Ind + 1 );
				break ;
				
			case 35:
				char Track2[ 40 ];
				memset( Track2, 0, sizeof( Track2 ) );
				sprintf( Track2, "%s=12125010000000000", devMsg.txnmsg.chn );
				len = strlen( Track2 );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, Track2, CHAR, len, Ind + 1 );
				break ;

			case 37:
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.RefNum, CHAR, 12, Ind + 1 );
				break ;
				
			case 39:
				OutBuf += fmt_out( OutBuf, &devMsg.txnmsg.Response, ITOA, 2, Ind + 1 );
				break;

			case 41:
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.Termid, CHAR, 16, Ind + 1 );
				break ;

			case 42:
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.Termid, CHAR, 15, Ind + 1 );
				break ;

			case 43:
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.TermLocation, CHAR, 40, Ind + 1 );
				break;

			case 44:
				memset( AddRespData, 0, sizeof( AddRespData ) );
				sprintf( AddRespData, "a%012s%012s", devMsg.txnmsg.LedgerBalance, devMsg.txnmsg.AvailBalance );
				len = strlen( AddRespData );				
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, AddRespData, CHAR, len, Ind + 1 );
				break ;

			case 48:
				len = strlen( devMsg.txnmsg.RsvFld9 );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 3, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.RsvFld9, CHAR, len, Ind + 1 );
				break;

			case 49:
				OutBuf += fmt_out( OutBuf, (char *) "356", CHAR, 3, Ind + 1 );
				break;
					
			case 59:
				break;

			case 60: 
				len = strlen( devMsg.txnmsg.IssBranch );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.IssBranch, CHAR, len, Ind + 1 );
				break ;

			case 61: 
				len = strlen( devMsg.txnmsg.FromAcctSubType );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.FromAcctSubType, CHAR, len, Ind + 1 );
				break;

			case 70:
				OutBuf += fmt_out( OutBuf, (char *) "001", CHAR, 3, Ind + 1 );
				break;
					
			case 100:
				len = strlen( devMsg.txnmsg.FromAccount );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.FromAccount, CHAR, len, Ind + 1 );
				break;

			case 102:
				len = strlen( devMsg.txnmsg.FromAccount );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.FromAccount, CHAR, len, Ind + 1 );
				break;

			case 103:
				len = strlen( devMsg.txnmsg.ToAccount );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.ToAccount, CHAR, len, Ind + 1 );
				break;

			case 104:
				len = strlen( devMsg.txnmsg.ToAccount );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.ToAccount, CHAR, len, Ind + 1 );
				break;

			case 126:
				len = strlen( devMsg.txnmsg.ToAccount );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 2, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.ToAccount, CHAR, len, Ind + 1 );
				break;

			case 127:
				len = strlen( devMsg.txnmsg.RsvFld1 );
				OutBuf += fmt_out( OutBuf, &len, ITOA, 3, Ind + 1 );
				OutBuf += fmt_out( OutBuf, devMsg.txnmsg.RsvFld1, CHAR, len, Ind + 1 );
				break;

			default:
				dbg->trace( NORMAL, "Unhandled bit in iso8583\n" );
				break ;
		}
	}
	return( OutBuf-offset ); 
}


int EzMobile8583 :: DecomposeISOMessage( char * InBuf, EzMsg *devMsg, char * DeviceId )
{
	int len ;
	char MobileNumber[17];
	char AplnCode[17];
	char Ack[2];
	char TransCode[200],TranCode[50],TranData[100];
	char Chn[20];
	char InstNo[13],Acc_Type[3];
	int PCode;
	struct ezcardinfo cinfo;
	struct ezcustomer custinfo; 
	time_t tme ;
	struct tm * t;
	char local_date[7], local_time[7], tran_date[7], tran_time[7];

		
	memset( MobileNumber, 0, sizeof( MobileNumber ) );
	memset( AplnCode, 0, sizeof( AplnCode ) );
	memset( Ack, 0, sizeof( Ack ) );
	memset( TransCode, 0, sizeof( TransCode ) );
	memset( Chn, 0, sizeof( Chn ) );
	memset( devMsg, 0, sizeof(EzMsg));
	memset( TranCode, 0, sizeof( TranCode ));
	memset( TranData, 0, sizeof( TranData ));

	
	getToken( InBuf, AplnCode, 0x1c, 1 );
	dbg->trace( NORMAL, "AplnCode [%s]\n",AplnCode );
	getToken( InBuf, MobileNumber, 0x1c, 2 );
	dbg->trace( NORMAL, "MobileNumber [%s]\n",MobileNumber );
	getToken( InBuf, Ack, 0x1c, 3 );
	dbg->trace( NORMAL, "Ack [%s]\n",Ack );
	getToken( InBuf, TransCode, 0x1c, 4 );
	dbg->trace( NORMAL, "TransCode [%s]\n",TransCode );
	getToken( TransCode, TranCode, ' ', 1);
	dbg->trace( NORMAL, "TranCode [%s]\n",TranCode );
	getToken( TransCode, TranData, ' ', 2);
	dbg->trace( NORMAL, "TranData [%s]\n",TranData );

	
	len =  GetChn( MobileNumber,Chn );
	
	if ( len != 0) 
	{
			dbg->trace( NORMAL, "Mobile Number in Not Valid [%d]\n",len );
			devMsg->txnmsg.Response = 07;
			devMsg->MsgId = NETWORK_TXN_RESPONSE;
			strcpy(devMsg->DeviceId,"MOBILE");
			dbg->trace( NORMAL, "mobile len [%d] [%s]\n", strlen(MobileNumber), MobileNumber );
			strncpy( devMsg->txnmsg.TermLocation, MobileNumber , strlen(MobileNumber));
			devMsg->txnmsg.OrgTraceNo = GenerateDeviceTraceNum( devMsg-> DeviceId ); 
			time( &tme );
			t= localtime( &tme ); 
			sprintf( local_time, "%02d%02d%02d", t->tm_hour, t->tm_min, t->tm_sec );
			sprintf( local_date, "%02d%02d%02d", t->tm_mday, t->tm_mon+1, (t->tm_year+1900) - 2000 );
			devMsg->txnmsg.TranDate = atol( local_date );
			devMsg->txnmsg.TranTime = atol( local_time );
			devMsg->txnmsg.OrgDate = atol( local_date );
			devMsg->txnmsg.OrgTime = atol( local_time );
			devMsg->txnmsg.LocalDate = atol( local_date );
			devMsg->txnmsg.LocalTime = atol( local_time );
			devMsg->txnmsg.CaptureDate = atol( local_date );
			devMsg->txnmsg.CaptureTime = atol( local_time );
			
			DiagnizeAndServeAppRequest(( char * ) devMsg, sizeof( devMsg ), DeviceId );
			return 0;
			
	}
	else 
		dbg->trace( NORMAL, "MobileNumber [%s] belongs to the CHN [%s]\n", MobileNumber, Chn );
	
	
	dbg->trace( NORMAL, " < CONDITION: CHECK CARDNO[%s] IN EZCARDINFO TABLE > \n", Chn ); 
	
	if( ( len = readCardInfo( Chn, &cinfo ) ) != 0 )
	{
			dbg->trace( NORMAL, " < Error In reading the ora[%d] From EZCARDINFO TABLE > \n", len );
			dbg->trace( NORMAL, " < Error In reading the CARDNO[%s] From EZCARDINFO TABLE > \n", Chn );
			devMsg->txnmsg.Response = 14;
			
			devMsg->MsgId = NETWORK_TXN_RESPONSE;
			strcpy(devMsg->DeviceId,"MOBILE");
			dbg->trace( NORMAL, "mobile len [%d] [%s]\n", strlen(MobileNumber), MobileNumber );
			strncpy( devMsg->txnmsg.TermLocation, MobileNumber , strlen(MobileNumber));
			devMsg->txnmsg.OrgTraceNo = GenerateDeviceTraceNum( devMsg-> DeviceId ); 
			time( &tme );
			t= localtime( &tme ); 
			sprintf( local_time, "%02d%02d%02d", t->tm_hour, t->tm_min, t->tm_sec );
			sprintf( local_date, "%02d%02d%02d", t->tm_mday, t->tm_mon+1, (t->tm_year+1900) - 2000 );
			devMsg->txnmsg.TranDate = atol( local_date );
			devMsg->txnmsg.TranTime = atol( local_time );
			devMsg->txnmsg.OrgDate = atol( local_date );
			devMsg->txnmsg.OrgTime = atol( local_time );
			devMsg->txnmsg.LocalDate = atol( local_date );
			devMsg->txnmsg.LocalTime = atol( local_time );
			devMsg->txnmsg.CaptureDate = atol( local_date );
			devMsg->txnmsg.CaptureTime = atol( local_time );
			
			DiagnizeAndServeAppRequest(( char * ) devMsg, sizeof( devMsg ), DeviceId );
			return 0;
	}
	else
	{
		
		dbg->trace( NORMAL, " CARDNO[%s] readed sucessfully From EZCARDINFO TABLE > \n", Chn );
		//dbg->trace( NORMAL,"CARDNO Successfully readed from EZCARDINFO TABLE [%s][%s][%s][%s][%s][%d][%d][%s][%d][%d][%s][%s]" ,cinfo.chn ,cinfo.cardtype ,cinfo.custid,cinfo.name,cinfo.limit_flag,cinfo.expiry_date,cinfo.status,cinfo.pinoffset,cinfo.retrycount,cinfo.last_txn_date,cinfo.txn_group_id,cinfo.visa_pvki);
		dbg->trace( NORMAL, " CARDNO[%s] CUSTID[%s] > \n", cinfo.chn , cinfo.custid );
		
		memset( InstNo, 0, sizeof( InstNo ) );
		strncpy( InstNo, Chn, 6 );
		memset( Acc_Type, 0 ,sizeof(Acc_Type) );
		
		dbg->trace(NORMAL, "Reading the Mobile Transaction Inforamation for TRANSACTION CODE [%s] from EZMOBILETRANSINFO TABLE \n", TransCode );
		
		if ( ( len = GetMobileTranInfo( TranCode, &PCode, Acc_Type ) ) !=0 )
		{
			dbg->trace( NORMAL, "<Error in reading the Mobile Transaction Inforamation from EZMOBILETRANINFO Error ORA[%d]\n>",len);
			
			devMsg->txnmsg.Response = 05;
			
			devMsg->MsgId = NETWORK_TXN_RESPONSE;
			strcpy(devMsg->DeviceId,"MOBILE");
			dbg->trace( NORMAL, "mobile len [%d] [%s]\n", strlen(MobileNumber), MobileNumber );
			strncpy( devMsg->txnmsg.TermLocation, MobileNumber , strlen(MobileNumber));
			devMsg->txnmsg.OrgTraceNo = GenerateDeviceTraceNum( devMsg-> DeviceId ); 
			time( &tme );
			t= localtime( &tme ); 
			sprintf( local_time, "%02d%02d%02d", t->tm_hour, t->tm_min, t->tm_sec );
			sprintf( local_date, "%02d%02d%02d", t->tm_mday, t->tm_mon+1, (t->tm_year+1900) - 2000 );
			devMsg->txnmsg.TranDate = atol( local_date );
			devMsg->txnmsg.TranTime = atol( local_time );
			devMsg->txnmsg.OrgDate = atol( local_date );
			devMsg->txnmsg.OrgTime = atol( local_time );
			devMsg->txnmsg.LocalDate = atol( local_date );
			devMsg->txnmsg.LocalTime = atol( local_time );
			devMsg->txnmsg.CaptureDate = atol( local_date );
			devMsg->txnmsg.CaptureTime = atol( local_time );
			
			DiagnizeAndServeAppRequest(( char * ) devMsg, sizeof( devMsg ), DeviceId );
			return 0;
	
		}
		else 
			dbg->trace(NORMAL, "Mobile Transaction Inforamation PCODE [%d] ACT_TYPE[%s] Successfully Loaded\n", PCode, Acc_Type);
		
		if ( ( len =  readPrimaryAccount( InstNo, cinfo.custid, Acc_Type, &custinfo ) )!= 0 )
		{
			dbg->trace( NORMAL, "<Error in Reading the ACTNO details from the EZCUSTOMER TABLE Error ORA[%d] \n>",len);
				
			devMsg->txnmsg.Response = 05;
			
			devMsg->MsgId = NETWORK_TXN_RESPONSE;
			strcpy(devMsg->DeviceId,"MOBILE");
			dbg->trace( NORMAL, "mobile len [%d] [%s]\n", strlen(MobileNumber), MobileNumber );
			strncpy( devMsg->txnmsg.TermLocation, MobileNumber , strlen(MobileNumber));
			devMsg->txnmsg.OrgTraceNo = GenerateDeviceTraceNum( devMsg-> DeviceId ); 
			time( &tme );
			t= localtime( &tme ); 
			sprintf( local_time, "%02d%02d%02d", t->tm_hour, t->tm_min, t->tm_sec );
			sprintf( local_date, "%02d%02d%02d", t->tm_mday, t->tm_mon+1, (t->tm_year+1900) - 2000 );
			devMsg->txnmsg.TranDate = atol( local_date );
			devMsg->txnmsg.TranTime = atol( local_time );
			devMsg->txnmsg.OrgDate = atol( local_date );
			devMsg->txnmsg.OrgTime = atol( local_time );
			devMsg->txnmsg.LocalDate = atol( local_date );
			devMsg->txnmsg.LocalTime = atol( local_time );
			devMsg->txnmsg.CaptureDate = atol( local_date );
			devMsg->txnmsg.CaptureTime = atol( local_time );
			
			DiagnizeAndServeAppRequest(( char * ) devMsg, sizeof( devMsg ), DeviceId );
			return 0;
			
		}
		else 
		{
			dbg->trace( NORMAL, "<AccNO[%s] readed Sucessfully from the EZCUSTOMER TABLE>\n",custinfo.acct_no);
		}
		devMsg->MsgId = NETWORK_TXN_REQUEST;
		strcpy(devMsg->DeviceId,"MOBILE");
		devMsg->txnmsg.TxnCode = PCode;
//		char Termid[17];
		dbg->trace( NORMAL, "mobile len [%d] [%s]\n", strlen(MobileNumber), MobileNumber );
		strncpy( devMsg->txnmsg.TermLocation, MobileNumber , strlen(MobileNumber));
		
		
		devMsg->txnmsg.OrgTraceNo = GenerateDeviceTraceNum( devMsg-> DeviceId ); 
		devMsg->txnmsg.MsgType = 200;
		
		time( &tme );
		t= localtime( &tme ); 

		sprintf( local_time, "%02d%02d%02d", t->tm_hour, t->tm_min, t->tm_sec );
		sprintf( local_date, "%02d%02d%02d", t->tm_mday, t->tm_mon+1, (t->tm_year+1900) - 2000 );
		
		devMsg->txnmsg.TranDate = atol( local_date );
		devMsg->txnmsg.TranTime = atol( local_time );
		devMsg->txnmsg.OrgDate = atol( local_date );
		devMsg->txnmsg.OrgTime = atol( local_time );
		devMsg->txnmsg.LocalDate = atol( local_date );
		devMsg->txnmsg.LocalTime = atol( local_time );
		devMsg->txnmsg.CaptureDate = atol( local_date );
		devMsg->txnmsg.CaptureTime = atol( local_time );
		
		//int DevPinVerVal ;
		//int DevAuthVal ;
		//char AvailBalanceFlg;
		//short Merchant;
		//char DeviceType[ 16 ];
		strcpy(devMsg->txnmsg.chn, cinfo.chn );
		strcpy(devMsg->txnmsg.AcqBranch, custinfo.branch_id );
		strcpy(devMsg->txnmsg.IssBranch, custinfo.branch_id  ) ;
		strcpy( devMsg->txnmsg.ForwardBranch, custinfo.branch_id );
		strcpy( devMsg->txnmsg.FromAcctType, Acc_Type);
		strcpy( devMsg->txnmsg.FromAcctSubType, custinfo.acct_subtype );
	//	devMsg->txnmsg.ToAcctType[10];
	//	devMsg->txnmsg.ToAcctSubType[10];
	//	char Amount[15];
		//char DispAmount[15];
		//char Fee[15] ;
		//int AuthCode;
		strcpy(devMsg->txnmsg.FromAccount,custinfo.acct_no);
		//char ToAccount[33];
		//char AvailBalance[15];
		//char LedgerBalance[15];
		//char RefNum[13];
		//char PinBlock[17];
		//char NewPinBlock[17];
		strcpy(devMsg->txnmsg.AcquirerInst, custinfo.iin );
		strcpy(devMsg->txnmsg.IssuerInst, custinfo.iin  );
		strcpy(devMsg->txnmsg.ForwardInst, custinfo.iin );
		strcpy(devMsg->txnmsg.IdNo, TranData);
		/*char Track2[64];
		char Track3[64];
		char IdNo[ 17 ];
		int IdDate;
		char IdName[ 33 ];
		char RsvFld1[ 250 ];
		char RsvFld2[ 250 ];
		char RsvFld3[ 33 ];
		char RsvFld4[ 33 ];
		char RsvFld5[ 33 ];
		char RsvFld6[ 33 ];*/
		dbg->trace( NORMAL, "Successfully Completed");

		return 1;
			
	}
	return 1;
}

int main()
{
	ezdebug ezdbg ;
	TaskTools TTools;
	TTools.TaskInit();

	ezdbg.trace_on_file( "ezmobile8583.log", "ezmobile8583" );	
	EzMobile8583 isoobj( &ezdbg );
	isoobj.InitDriver( "ezdb" );
	isoobj.ServiceRequests();
}
