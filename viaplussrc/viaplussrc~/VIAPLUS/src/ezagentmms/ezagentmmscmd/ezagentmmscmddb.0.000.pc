#include <sqlca.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ezagentmms/ezagentmmsdbtypes.h>

int readEzMMSMerchantProfile( const char *I_InstId, const char *I_MerchantId, struct EzMMSMerchantProfile *merchantprofile_ptr )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char MerchantId[ 16 ];
		char MCCList[ 33 ];
		char MerchantTypeId[ 17 ];
		char ParentMerchantId[ 16 ];
		char MerchantName[ 33 ];
		char Addr1[ 65 ];
		char Addr2[ 65 ];
		char Status;
		char DOB[ 11 ];
		char PMobileNo[ 17 ];
		char SMobileNo[ 17 ];
		char PMailAddr[ 33 ];
		char SMailAddr[ 33 ];
		char SettCurrCode[ 5 ];
		char CurrList[ 33 ];
		char CardIssuanceFlag;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR MCCList IS STRING(33);
	EXEC SQL VAR MerchantTypeId IS STRING(17);
	EXEC SQL VAR ParentMerchantId IS STRING(16);
	EXEC SQL VAR MerchantName IS STRING(33);
	EXEC SQL VAR Addr1 IS STRING(65);
	EXEC SQL VAR Addr2 IS STRING(65);
	EXEC SQL VAR DOB IS STRING(11);
	EXEC SQL VAR PMobileNo IS STRING(17);
	EXEC SQL VAR SMobileNo IS STRING(17);
	EXEC SQL VAR PMailAddr IS STRING(33);
	EXEC SQL VAR SMailAddr IS STRING(33);
	EXEC SQL VAR SettCurrCode IS STRING(5);
	EXEC SQL VAR CurrList IS STRING(33);
	
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( MCCList, 0, sizeof( MCCList ) );
	memset( MerchantTypeId, 0, sizeof( MerchantTypeId ) );
	memset( ParentMerchantId, 0, sizeof( ParentMerchantId ) );
	memset( MerchantName, 0, sizeof( MerchantName ) );
	memset( Addr1, 0, sizeof( Addr1 ) );
	memset( Addr2, 0, sizeof( Addr2 ) );
	memset( DOB, 0, sizeof( DOB ) );
	memset( PMobileNo, 0, sizeof( PMobileNo ) );
	memset( SMobileNo, 0, sizeof( SMobileNo ) );
	memset( PMailAddr, 0, sizeof( PMailAddr ) );
	memset( SMailAddr, 0, sizeof( SMailAddr ) );
	memset( SettCurrCode, 0, sizeof( SettCurrCode ) );
	memset( CurrList, 0, sizeof( CurrList ) );
	
	strcpy( InstId, I_InstId );
	strcpy( MerchantId, I_MerchantId );
	
	EXEC SQL SELECT
		RTRIM( NVL( MCC_LIST, 'NA' ) ),
    	RTRIM( NVL( MERCH_TYPE_ID, 'NA' ) ),
    	RTRIM( NVL( PARENT_MERCH_ID, 'NA' ) ),
    	RTRIM( NVL( MERCH_NAME, 'NA' ) ),
    	RTRIM( NVL( PRIM_MAIL_ADDR, 'NA' ) ),
    	RTRIM( NVL( SEC_MAIL_ADDR, 'NA' ) ),
    	NVL( STATUS, '0' ),
    	RTRIM( NVL( TO_CHAR(DOB, 'DD-MM-YY' ), 'NA' ) ),
    	RTRIM( NVL( PRIM_MOBILE_NO, 'NA' ) ),
    	RTRIM( NVL( SEC_MOBILE_NO, 'NA' ) ),
    	RTRIM( NVL( PRIM_EMAIL_ID, 'NA' ) ),
    	RTRIM( NVL( SEC_EMAIL_ID, 'NA' ) ),
    	RTRIM( NVL( SETT_CURR_CODE, 'NA' ) ),
    	RTRIM( NVL( CURR_LIST, 'NA' ) ),
    	NVL( CARD_ISSUED_FLAG, 'N' )
	INTO
		:MCCList,
		:MerchantTypeId,
		:ParentMerchantId,
		:MerchantName,
		:Addr1,
		:Addr2,
		:Status,
		:DOB,
		:PMobileNo,
		:SMobileNo,
		:PMailAddr,
		:SMailAddr,
		:SettCurrCode,
		:CurrList,
		:CardIssuanceFlag
	FROM EZMMSMERCHANTPROFILE WHERE RTRIM(INST_ID) = :InstId AND RTRIM(MERCH_ID)=:MerchantId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( merchantprofile_ptr->InstId, InstId );
    strcpy( merchantprofile_ptr->MerchantId, MerchantId );
    strcpy( merchantprofile_ptr->MCCList, MCCList );
    strcpy( merchantprofile_ptr->MerchantTypeId, MerchantTypeId );
    strcpy( merchantprofile_ptr->ParentMerchantId, ParentMerchantId );
  	strcpy( merchantprofile_ptr->MerchantName, MerchantName );
  	strcpy( merchantprofile_ptr->Addr1, Addr1 );
  	strcpy( merchantprofile_ptr->Addr2, Addr2 );
  	merchantprofile_ptr->Status = Status;
  	strcpy( merchantprofile_ptr->DOB, DOB );
  	strcpy( merchantprofile_ptr->PMobileNo, PMobileNo );
  	strcpy( merchantprofile_ptr->SMobileNo, SMobileNo );
  	strcpy( merchantprofile_ptr->PMailAddr, PMailAddr );
  	strcpy( merchantprofile_ptr->SMailAddr, SMailAddr );
  	strcpy( merchantprofile_ptr->SettCurrCode, SettCurrCode );
  	strcpy( merchantprofile_ptr->CurrList, CurrList );
  	merchantprofile_ptr->CardIssuanceFlag = CardIssuanceFlag;
	return sqlca.sqlcode;
}

int readEzMMSMerchantType( const char *I_InstId, const char *I_MerchantTypeId, struct EzMMSMerchantType *merchanttype_ptr )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char MerchantTypeId[ 17 ];
		char TxnAllowed[ 65 ];
		char LoyaltyReq;
		int MaxPINRetryCount;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantTypeId IS STRING(17);
	EXEC SQL VAR TxnAllowed IS STRING(65);
	
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantTypeId, 0, sizeof( MerchantTypeId ) );
	memset( TxnAllowed, 0, sizeof( TxnAllowed ) );
	
	strcpy( InstId, I_InstId );
	strcpy( MerchantTypeId, I_MerchantTypeId );
	
	EXEC SQL SELECT
		RTRIM( NVL( TXN_ALLOWED, 'NA' ) ),
    	NVL( LOYALTY_PGM_REQ, 'N' ),
    	NVL( MAX_PIN_RETRY_COUNT, '3' )
	INTO
		:TxnAllowed,
		:LoyaltyReq,
		:MaxPINRetryCount
	FROM EZMMS_MERCHANTTYPE WHERE RTRIM(INST_ID) = :InstId AND RTRIM(MERCHANT_TYPE_ID)=:MerchantTypeId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( merchanttype_ptr->InstId, InstId );
    strcpy( merchanttype_ptr->MerchantTypeId, MerchantTypeId );
    strcpy( merchanttype_ptr->TxnAllowed, TxnAllowed );
    merchanttype_ptr->LoyaltyReq = LoyaltyReq;
  	merchanttype_ptr->MaxPINRetryCount = MaxPINRetryCount;
	return sqlca.sqlcode;
}

int readEzMMSStoreProfile( const char *I_InstId, const char *I_MerchantId, const char *I_StoreId, struct EzMMSStoreProfile *storeprofile_ptr )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char MerchantId[ 16 ];
		char StoreId[ 33 ];
		char Status;
		char StoreName[ 33 ];
		char StoreLocation[ 65 ];
		char CityName[ 33 ];
		char CityCode[ 17 ];
		char StateName[ 33 ];
		char CountryName[ 33 ];
		char LandLine1[ 17 ];
		char LandLine2[ 17 ];
		char PMobileNo[ 17 ];
		char SMobileNo[ 17 ];
		int WorkingHrs;
		char OpeningTime[ 7 ];
		char ClosingTime[ 7 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR StoreId IS STRING(33);
	EXEC SQL VAR StoreName IS STRING(33);
	EXEC SQL VAR StoreLocation IS STRING(65);
	EXEC SQL VAR CityName IS STRING(33);
	EXEC SQL VAR StateName IS STRING(33);
	EXEC SQL VAR CountryName IS STRING(33);
	EXEC SQL VAR LandLine1 IS STRING(17);
	EXEC SQL VAR LandLine2 IS STRING(17);
	EXEC SQL VAR PMobileNo IS STRING(17);
	EXEC SQL VAR SMobileNo IS STRING(17);
	EXEC SQL VAR OpeningTime IS STRING(7);
	EXEC SQL VAR ClosingTime IS STRING(7);
		
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( StoreId, 0, sizeof( StoreId ) );
	memset( StoreName, 0, sizeof( StoreName ) );
	memset( StoreLocation, 0, sizeof( StoreLocation ) );
	memset( CityName, 0, sizeof( CityName ) );
	memset( CityCode, 0, sizeof( CityCode ) );
	memset( StateName, 0, sizeof( StateName ) );
	memset( CountryName, 0, sizeof( CountryName ) );
	memset( LandLine1, 0, sizeof( LandLine1 ) );
	memset( LandLine2, 0, sizeof( LandLine2 ) );
	memset( PMobileNo, 0, sizeof( PMobileNo ) );
	memset( SMobileNo, 0, sizeof( SMobileNo ) );
	memset( OpeningTime, 0, sizeof( OpeningTime ) );
	memset( ClosingTime, 0, sizeof( ClosingTime ) );
	
	strcpy( InstId, I_InstId );
	strcpy( MerchantId, I_MerchantId );
	strcpy( StoreId, I_StoreId );
	
	EXEC SQL SELECT
		NVL( STORE_STATUS, '0' ),
    	RTRIM( NVL( STORE_NAME, 'NA' ) ),
    	RTRIM( NVL( STORE_LOCATION, 'NA' ) ),
    	RTRIM( NVL( CITY_NAME, 'NA' ) ),
    	RTRIM( NVL( CITY_CODE, 'NA' ) ),
    	RTRIM( NVL( STATE_NAME, 'NA' ) ),
    	RTRIM( NVL( COUNTRY_NAME, 'NA' ) ),
    	RTRIM( NVL( PRIM_LAND_LINE_NO, 'NA' ) ),
    	RTRIM( NVL( SEC_LAND_LINE_NO, 'NA' ) ),
    	RTRIM( NVL( PRIM_MOBILE_NUM, 'NA' ) ),
    	RTRIM( NVL( SEC_MOBILE_NUM, 'NA' ) ),
    	NVL( WORKING_HRS, '24' ),
    	RTRIM( NVL( OPENING_TIME, '000000' ) ),
    	RTRIM( NVL( CLOSING_TIME, '235959' ) )
	INTO
		:StoreId,
		:Status,
		:StoreName,
		:StoreLocation,
		:CityName,
		:CityCode,
		:StateName,
		:CountryName,
		:LandLine1,
		:LandLine2,
		:PMobileNo,
		:SMobileNo,
		:WorkingHrs,
		:OpeningTime,
		:ClosingTime
	FROM EZMMS_STOREPROFILE WHERE RTRIM(INST_ID) = :InstId AND RTRIM(MERCH_ID)=:MerchantId AND RTRIM(STORE_ID)=:StoreId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( storeprofile_ptr->InstId, InstId );
    strcpy( storeprofile_ptr->MerchantId, MerchantId );
    strcpy( storeprofile_ptr->StoreId, StoreId );
    storeprofile_ptr->Status = Status;
    strcpy( storeprofile_ptr->StoreName, StoreName );
    strcpy( storeprofile_ptr->StoreLocation, StoreLocation );
    strcpy( storeprofile_ptr->CityName, CityName );
    strcpy( storeprofile_ptr->CityCode, CityCode );
    strcpy( storeprofile_ptr->StateName, StateName );
    strcpy( storeprofile_ptr->CountryName, CountryName );
    strcpy( storeprofile_ptr->LandLine1, LandLine1 );
    strcpy( storeprofile_ptr->LandLine2, LandLine2 );
    strcpy( storeprofile_ptr->PMobileNo, PMobileNo );
    strcpy( storeprofile_ptr->SMobileNo, SMobileNo );
    storeprofile_ptr->WorkingHrs = WorkingHrs;
    strcpy( storeprofile_ptr->OpeningTime, OpeningTime );
    strcpy( storeprofile_ptr->ClosingTime, ClosingTime );
	return sqlca.sqlcode;
}

int readEzMMSTerminalProfile( const char *I_MachineId, struct EzMMSTerminalProfile *terminalprofile_ptr )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char MachineId[ 33 ];
		char InstId[ 13 ];
		char MerchantId[ 16 ];
		char StoreId[ 33 ];
		char TerminalId[ 9 ];
		char TerminalName[ 33 ];
		char TermLocation[ 65 ];
		char TerminalStatus;
		int WorkingHrs;
		char OpeningTime[ 7 ];
		char ClosingTime[ 7 ];
		char CountryCode[ 5 ];
		char ChipEnabled;
		char TermMasterKey[ 65 ];
		char TermPINKey[ 65 ];
		char TermMACKey[ 65 ];
		char BatchId[ 13 ];
		char TermBatchId[ 13 ];
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR MachineId IS STRING(33);
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR StoreId IS STRING(33);
	EXEC SQL VAR TerminalId IS STRING(9);
	EXEC SQL VAR TerminalName IS STRING(33);
	EXEC SQL VAR TermLocation IS STRING(65);
	EXEC SQL VAR OpeningTime IS STRING(7);
	EXEC SQL VAR ClosingTime IS STRING(7);
	EXEC SQL VAR CountryCode IS STRING(5);
	EXEC SQL VAR TermMasterKey IS STRING(65);
	EXEC SQL VAR TermPINKey IS STRING(65);
	EXEC SQL VAR TermMACKey IS STRING(65);
	EXEC SQL VAR BatchId IS STRING(13);
	EXEC SQL VAR TermBatchId IS STRING(13);
	
	memset( MachineId, 0, sizeof( MachineId ) );
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( StoreId, 0, sizeof( StoreId ) );
	memset( TerminalId, 0, sizeof( TerminalId ) );
	memset( TerminalName, 0, sizeof( TerminalName ) );
	memset( TermLocation, 0, sizeof( TermLocation ) );
	memset( OpeningTime, 0, sizeof( OpeningTime ) );
	memset( ClosingTime, 0, sizeof( ClosingTime ) );
	memset( CountryCode, 0, sizeof( CountryCode ) );
	memset( TermMasterKey, 0, sizeof( TermMasterKey ) );
	memset( TermPINKey, 0, sizeof( TermPINKey ) );
	memset( TermMACKey, 0, sizeof( TermMACKey ) );
	memset( BatchId, 0, sizeof( BatchId ) );
	memset( TermBatchId, 0, sizeof( TermBatchId ) );
	
	strcpy( MachineId, I_MachineId );
	
	EXEC SQL SELECT
		RTRIM(INST_ID),
    	RTRIM(MERCH_ID),
    	RTRIM(STORE_ID),
    	RTRIM(TERMINAL_ID),
    	RTRIM( NVL( TERMINAL_NAME, 'NA' ) ),
    	RTRIM( NVL( TERMINAL_LOCATION, 'NA' ) ),
    	NVL( TERMINAL_STATUS, '0' ),
    	NVL( WORKING_HRS, '24' ),
    	RTRIM( NVL( OPENING_TIME, '000000' ) ),
    	RTRIM( NVL( CLOSING_TIME, '235959' ) ),
    	RTRIM(COUNTRY_CODE),
    	NVL( CHIP_ENABLED, 'N' ),
    	RTRIM( TERM_MASTER_KEY ),
    	NVL( RTRIM( TERM_PIN_KEY, '1111111111111111' ) ),
    	NVL( RTRIM( TERM_MAC_KEY, '1111111111111111' ) )
    INTO
		:InstId,
		:MerchantId,
		:StoreId,
		:TerminalId,
		:TerminalName,
		:TermLocation,
		:TerminalStatus,
		:WorkingHrs,
		:OpeningTime,
		:ClosingTime,
		:CountryCode,
		:ChipEnabled,
		:TermMasterKey,
		:TermPINKey,
		:TermMACKey
	FROM EZMMS_TERMINALPROFILE WHERE RTRIM(MACHINE_ID) = :MachineId;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( terminalprofile_ptr->MachineId, MachineId );
	strcpy( terminalprofile_ptr->InstId, InstId );
    strcpy( terminalprofile_ptr->MerchantId, MerchantId );
    strcpy( terminalprofile_ptr->StoreId, StoreId );
    strcpy( terminalprofile_ptr->TerminalId, TerminalId );
    strcpy( terminalprofile_ptr->TerminalName, TerminalName );
    strcpy( terminalprofile_ptr->TerminalLocation, TermLocation );
    terminalprofile_ptr->TerminalStatus = TerminalStatus;
    terminalprofile_ptr->WorkingHrs = WorkingHrs;
    strcpy( terminalprofile_ptr->OpeningTime, OpeningTime );
    strcpy( terminalprofile_ptr->ClosingTime, ClosingTime );
	strcpy( terminalprofile_ptr->CountryCode, CountryCode );
	terminalprofile_ptr->ChipEnabled = ChipEnabled;
	strcpy( terminalprofile_ptr->TermMasterKey, TermMasterKey );
	strcpy( terminalprofile_ptr->TermPINKey, TermPINKey );
	strcpy( terminalprofile_ptr->TermMACKey, TermMACKey );
	
	return sqlca.sqlcode;
}

int readEzMMSMerchantRelation( const char *I_InstId, const char *I_MerchantId, const char *I_AccountNo, struct EzMMSMerchantRelation *merchantrelation_ptr )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char InstId[ 13 ];
		char MerchantId[ 16 ];
		char AccountNo[ 33 ];
		char CurrCode[ 5 ];
		char AccountStatus;
		short AccountPriority;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR InstId IS STRING(13);
	EXEC SQL VAR MerchantId IS STRING(16);
	EXEC SQL VAR AccountNo IS STRING(33);
	EXEC SQL VAR CurrCode IS STRING(5);
	
	memset( InstId, 0, sizeof( InstId ) );
	memset( MerchantId, 0, sizeof( MerchantId ) );
	memset( AccountNo, 0, sizeof( AccountNo ) );
	memset( CurrCode, 0, sizeof( CurrCode ) );
	
	strcpy( InstId, I_InstId );
	strcpy( MerchantId, I_MerchantId );
	strcpy( AccountNo, I_AccountNo );
		
	EXEC SQL SELECT
		RTRIM(CURR_CODE),
    	STATUS,
    	PRIORITY
    INTO
		:CurrCode,
		:AccountStatus,
		:AccountPriority
	FROM EZMMS_RELATION WHERE RTRIM(INST_ID) = :InstId AND RTRIM(MERCH_ID) = :MerchantId AND RTRIM(ACCT_NO) = :AccountNo;
	
	if ( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	strcpy( merchantrelation_ptr->InstId, InstId );
    strcpy( merchantrelation_ptr->MerchantId, MerchantId );
    strcpy( merchantrelation_ptr->AccountNo, AccountNo );
    strcpy( merchantrelation_ptr->CurrCode, CurrCode );
    merchantrelation_ptr->AccountStatus = AccountStatus;
    merchantrelation_ptr->AccountPriority = AccountPriority;
	return sqlca.sqlcode;
}


