#include <sqlca.h>
#include <stdlib.h>
#include <string.h>
#include <ezlink/ezlnkmsg.h>

int LocateEzTxnLog( struct EzTxnMsg *txnmsg, const char *I_TxnRefNum )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char TxnRefNum[ 151 ];
		char Input_TxnRefNum[ 151 ];
		int MsgType;
		int OrgMsgType;
		int TxnCode;
		char TerminalId[ 17 ];
		char TermLoc[ 65 ];
		int TraceNo;
		int OrgTraceNo;
		int TranDate;
		int TranTime;
		int OrgTranDate;
		int OrgTranTime;
		int LocalDate;
		int LocalTime;
		int RespCode;
		int RevCode;
		int ReasonCode;
		int CaptureDate;
		int CaptureTime;
		int SettlementDate;
		int AcqCurrencyCode;
		int AcqConvRate;
		int AcqConvDate;
		int IssCurrencyCode;
		int IssConvRate;
		int IssConvDate;
		int SettCurrencyCode;
		int SettConvRate;
		int SettConvDate;
		int MerchantType;
		int PosEntryCode;
		int PosConditionCode;
		int PosCapCode;
		char PosPinCapCode;
		char CHN[ 20 ];
		char AcqBranchCode[ 11 ];
		char IssBranchCode[ 11 ];
		char ForwardBranchCode[ 11 ];
		char FromAcctType[ 11 ];
		char FromAcctSubType[ 11 ];
		char ToAcctType[ 11 ];
		char ToAcctSubType[ 11 ];
		char AvailBalance[ 15 ];
		char LedgerBalance[ 15 ];
		char Amount[ 15 ];
		char TxnFee[ 15 ];
		char DispAmount[ 15 ];
		char FromAccount[ 33 ];
		char ToAccount[ 33 ];
		char RefNum[ 13 ];
		int AuthCode;
		char AcceptorName[ 41 ];
		char AcquirerInst[ 11 ];
		char IssuerInst[ 11 ];
		char ForwardInst[ 11 ];
		char AcquirerBin[ 11 ];
		char IssuerBin[ 11 ];
		char ForwardBin[ 11 ];
		char Track2[ 40 ];
		char RsvFld1[ 50 ];
		char RsvFld2[ 50 ];
		char RsvFld3[ 50 ];
		char RsvFld4[ 50 ];
		char RsvFld5[ 50 ];
		char RsvFld6[ 50 ];
		char OrgChannel[ 33 ];
		char OrgPort[ 33 ];
		short ind_var;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR TxnRefNum IS STRING(151);
	EXEC SQL VAR Input_TxnRefNum IS STRING(151);
	EXEC SQL VAR TerminalId IS STRING(17);
	EXEC SQL VAR TermLoc IS STRING(65);
	EXEC SQL VAR CHN IS STRING(20);
	EXEC SQL VAR AcqBranchCode IS STRING(11);
	EXEC SQL VAR IssBranchCode IS STRING(11);
	EXEC SQL VAR ForwardBranchCode IS STRING(11);
	EXEC SQL VAR FromAcctType IS STRING(11);
	EXEC SQL VAR FromAcctSubType IS STRING(11);
	EXEC SQL VAR ToAcctType IS STRING(11);
	EXEC SQL VAR ToAcctSubType IS STRING(11);
	EXEC SQL VAR AvailBalance IS STRING(11);
	EXEC SQL VAR LedgerBalance IS STRING(11);
	EXEC SQL VAR Amount IS STRING(15);
	EXEC SQL VAR TxnFee IS STRING(15);
	EXEC SQL VAR DispAmount IS STRING(15);
	EXEC SQL VAR FromAccount IS STRING(33);
	EXEC SQL VAR ToAccount IS STRING(33);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcceptorName IS STRING(41);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcquirerInst IS STRING(11);
	EXEC SQL VAR IssuerInst IS STRING(11);
	EXEC SQL VAR ForwardInst IS STRING(11);
	EXEC SQL VAR AcquirerBin IS STRING(11);
	EXEC SQL VAR IssuerBin IS STRING(11);
	EXEC SQL VAR ForwardBin IS STRING(11);
	EXEC SQL VAR Track2 IS STRING(40);
	EXEC SQL VAR RsvFld1 IS STRING(50);
	EXEC SQL VAR RsvFld2 IS STRING(50);
	EXEC SQL VAR RsvFld3 IS STRING(50);
	EXEC SQL VAR RsvFld4 IS STRING(50);
	EXEC SQL VAR RsvFld5 IS STRING(50);
	EXEC SQL VAR RsvFld6 IS STRING(50);
	EXEC SQL VAR OrgChannel IS STRING(33);
	EXEC SQL VAR OrgPort IS STRING(33);
	EXEC SQL VAR Input_InstId IS STRING(11);
	EXEC SQL VAR Input_chn IS STRING(20);
	EXEC SQL VAR Input_TerminalId IS STRING(17);

	memset( TxnRefNum, 0, sizeof( TxnRefNum ) );
	memset( Input_TxnRefNum, 0, sizeof( Input_TxnRefNum ) );
	memset( TerminalId, 0, sizeof( TerminalId ) );
	memset( TermLoc, 0, sizeof( TermLoc ) );
	memset( CHN, 0, sizeof( CHN ) );
	memset( AcqBranchCode, 0, sizeof( AcqBranchCode ) );
	memset( IssBranchCode, 0, sizeof( IssBranchCode ) );
	memset( ForwardBranchCode, 0, sizeof( ForwardBranchCode ) );
	memset( FromAcctType, 0, sizeof( FromAcctType ) );
	memset( FromAcctSubType, 0, sizeof( FromAcctSubType ) );
	memset( ToAcctType, 0, sizeof( ToAcctType ) );
	memset( ToAcctSubType, 0, sizeof( ToAcctSubType ) );
	memset( Amount, 0, sizeof( Amount ) );
	memset( DispAmount, 0, sizeof( DispAmount ) );
	memset( FromAccount, 0, sizeof( FromAccount ) );
	memset( ToAccount, 0, sizeof( ToAccount ) );
	memset( RefNum, 0, sizeof( RefNum ) );
	memset( AcquirerInst, 0, sizeof( AcquirerInst ) );
	memset( IssuerInst, 0, sizeof( IssuerInst ) );
	memset( ForwardInst, 0, sizeof( ForwardInst ) );
	memset( AcquirerBin, 0, sizeof( AcquirerBin ) );
	memset( IssuerBin, 0, sizeof( IssuerBin ) );
	memset( ForwardBin, 0, sizeof( ForwardBin ) );
	memset( Track2, 0, sizeof( Track2 ) );
	memset( RsvFld1, 0, sizeof( RsvFld1 ) );
	memset( RsvFld2, 0, sizeof( RsvFld2 ) );
	memset( RsvFld3, 0, sizeof( RsvFld3 ) );
	memset( RsvFld4, 0, sizeof( RsvFld4 ) );
	memset( RsvFld5, 0, sizeof( RsvFld5 ) );
	memset( RsvFld6, 0, sizeof( RsvFld6 ) );
	memset( OrgChannel, 0, sizeof( OrgChannel ) );
	memset( OrgPort, 0, sizeof( OrgPort ) );
	
	strcpy( Input_TxnRefNum, I_TxnRefNum );
	
	EXEC SQL SELECT
		TXNREFNUM,
		MSGTYPE,
		ORGMSGTYPE,
		TXNCODE,
		RTRIM(TERMINALID),
		RTRIM(TERMLOC),
		TRACENO,
		ORGTRACENO,
		TRANDATE,
		TRANTIME,
		ORGTRANDATE,
		ORGTRANTIME,
		LOCALDATE,
		LOCALTIME,
		RESPCODE,
		REVCODE,
		REASONCODE,
		CAPTUREDATE,
		CAPTURETIME,
		SETTLEMENTDATE,
		ACQCURRENCYCODE,
		ACQCONVRATE,
		ACQCONVDATE,
		ISSCURRENCYCODE,
		ISSCONVRATE,
		ISSCONVDATE,
		SETTCURRENCYCODE,
		SETTCONVRATE,
		SETTCONVDATE,
		MERCHANTTYPE,
		POSENTRYCODE,
		POSCONDITIONCODE,
		POSCAPCODE,
		POSPINCAPCODE,
		RTRIM(CHN),
		RTRIM(ACQBRANCHCODE),
		RTRIM(ISSBRANCHCODE),
		RTRIM(FORWARDBRANCHCODE),
		RTRIM(FROMACCTTYPE),
		RTRIM(FROMACCTSUBTYPE),
		RTRIM(TOACCTTYPE),
		RTRIM(TOACCTSUBTYPE),
		RTRIM(AVAILBALANCE),
		RTRIM(LEDGERBALANCE),
		RTRIM(AMOUNT),
		RTRIM(TXNFEE),
		RTRIM(DISPAMOUNT),
		RTRIM(FROMACCOUNT),
		RTRIM(TOACCOUNT),
		RTRIM(REFNUM),
		RTRIM(AUTHCODE),
		RTRIM(ACCEPTORNAME),
		RTRIM(ACQUIRERINST),
		RTRIM(ISSUERINST),
		RTRIM(FORWARDINST),
		RTRIM(ACQUIRERBIN),
		RTRIM(ISSUERBIN),
		RTRIM(FORWARDBIN),
		RTRIM(TRACK2),
		RTRIM(RSVFLD1),
		RTRIM(RSVFLD2),
		RTRIM(RSVFLD3),
		RTRIM(RSVFLD4),
		RTRIM(RSVFLD5),
		RTRIM(RSVFLD6),
		RTRIM(ORGCHANNEL),
		RTRIM(ORGPORT)
		INTO
		:TxnRefNum,
		:MsgType,
		:OrgMsgType:ind_var,
		:TxnCode,
		:TerminalId,
		:TermLoc:ind_var,
		:TraceNo,
		:OrgTraceNo:ind_var,
		:TranDate,
		:TranTime,
		:OrgTranDate:ind_var,
		:OrgTranTime:ind_var,
		:LocalDate,
		:LocalTime,
		:RespCode,
		:RevCode:ind_var,
		:ReasonCode:ind_var,
		:CaptureDate:ind_var,
		:CaptureTime:ind_var,
		:SettlementDate:ind_var,
		:AcqCurrencyCode,
		:AcqConvRate:ind_var,
		:AcqConvDate:ind_var,
		:IssCurrencyCode,
		:IssConvRate:ind_var,
		:IssConvDate:ind_var,
		:SettCurrencyCode:ind_var,
		:SettConvRate:ind_var,
		:SettConvDate:ind_var,
		:MerchantType,
		:PosEntryCode:ind_var,
		:PosConditionCode:ind_var,
		:PosCapCode:ind_var,
		:PosPinCapCode:ind_var,
		:CHN,
		:AcqBranchCode,
		:IssBranchCode,
		:ForwardBranchCode:ind_var,
		:FromAcctType:ind_var,
		:FromAcctSubType:ind_var,
		:ToAcctType:ind_var,
		:ToAcctSubType:ind_var,
		:AvailBalance:ind_var,
		:LedgerBalance:ind_var,
		:Amount:ind_var,
		:TxnFee:ind_var,
		:DispAmount:ind_var,
		:FromAccount:ind_var,
		:ToAccount:ind_var,
		:RefNum:ind_var,
		:AuthCode:ind_var,
		:AcceptorName:ind_var,
		:AcquirerInst,
		:IssuerInst,
		:ForwardInst:ind_var,
		:AcquirerBin,
		:IssuerBin,
		:ForwardBin:ind_var,
		:Track2:ind_var,
		:RsvFld1:ind_var,
		:RsvFld2:ind_var,
		:RsvFld3:ind_var,
		:RsvFld4:ind_var,
		:RsvFld5:ind_var,
		:RsvFld6:ind_var,
		:OrgChannel,
		:OrgPort
	FROM EZTXNLOG WHERE RTRIM(TXNREFNUM)=:Input_TxnRefNum;

	if( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	
	txnmsg->MsgType = MsgType;
	txnmsg->OrgMsgType = OrgMsgType;
	txnmsg->TxnCode = TxnCode;
	memset( txnmsg->TerminalLocation, 0, sizeof( txnmsg->TerminalLocation ) );
	strcpy( txnmsg->TerminalLocation, TermLoc );
	txnmsg->TraceNo = TraceNo;
	txnmsg->OrgTraceNo = OrgTraceNo;
	txnmsg->TranDate = TranDate;	 
	txnmsg->TranTime = TranTime;
	txnmsg->OrgTranDate = OrgTranDate;
	txnmsg->OrgTranTime = OrgTranTime;
	txnmsg->LocalDate = LocalDate;
	txnmsg->LocalTime = LocalTime;
	txnmsg->RespCode = RespCode;
	txnmsg->RevCode = RevCode;
	txnmsg->ReasonCode = ReasonCode;
	txnmsg->CaptureDate = CaptureDate;
	txnmsg->CaptureTime = CaptureTime;
	txnmsg->SettlementDate = SettlementDate;
	txnmsg->AcqCurrencyCode = AcqCurrencyCode;
	txnmsg->IssCurrencyCode = IssCurrencyCode;
	txnmsg->SettCurrencyCode = SettCurrencyCode;
	txnmsg->AcqConvRate = AcqConvRate;
	txnmsg->AcqConvDate = AcqConvDate;
	txnmsg->IssConvRate = IssConvRate;
	txnmsg->IssConvDate = IssConvDate;
	txnmsg->SettConvRate = SettConvRate;
	txnmsg->SettConvDate = SettConvDate;
	txnmsg->MerchantType = MerchantType;
	txnmsg->PosEntryCode = PosEntryCode;
	txnmsg->PosConditionCode = PosConditionCode;
	txnmsg->PosCapCode = PosCapCode;
	txnmsg->PosPinCapCode = PosPinCapCode;
	memset( txnmsg->AcqBranchCode, 0, sizeof( txnmsg->AcqBranchCode ) );
	strcpy( txnmsg->AcqBranchCode, AcqBranchCode );
	memset( txnmsg->IssBranchCode, 0, sizeof( txnmsg->IssBranchCode ) );
	strcpy( txnmsg->IssBranchCode, IssBranchCode );
	memset( txnmsg->ForwardBranchCode, 0, sizeof( txnmsg->ForwardBranchCode ) );
	strcpy( txnmsg->ForwardBranchCode,ForwardBranchCode );
	memset( txnmsg->FromAcctType, 0, sizeof( txnmsg->FromAcctType ) );
	strcpy( txnmsg->FromAcctType, FromAcctType );
	memset( txnmsg->FromAcctSubType, 0, sizeof( txnmsg->FromAcctSubType ) );
	strcpy( txnmsg->FromAcctSubType, FromAcctSubType );
	memset( txnmsg->ToAcctType, 0, sizeof( txnmsg->ToAcctType ) );
	strcpy( txnmsg->ToAcctType, ToAcctType );
	memset( txnmsg->ToAcctSubType, 0, sizeof( txnmsg->ToAcctSubType ) );
	strcpy( txnmsg->ToAcctSubType, ToAcctSubType );
	memset( txnmsg->AvailBalance, 0, sizeof( txnmsg->AvailBalance ) );
	strcpy( txnmsg->AvailBalance, AvailBalance );
	memset( txnmsg->LedgerBalance, 0, sizeof( txnmsg->LedgerBalance ) );
	strcpy( txnmsg->LedgerBalance, LedgerBalance );
	memset( txnmsg->Amount, 0, sizeof( txnmsg->Amount ) );
	strcpy( txnmsg->Amount, Amount );
	memset( txnmsg->TxnFee, 0, sizeof( txnmsg->TxnFee ) );
	strcpy( txnmsg->TxnFee, TxnFee );
	memset( txnmsg->DispAmount, 0, sizeof( txnmsg->DispAmount ) );
	strcpy( txnmsg->DispAmount, DispAmount );
	memset( txnmsg->FromAccount, 0, sizeof( txnmsg->FromAccount ) );
	strcpy( txnmsg->FromAccount, FromAccount );
	memset( txnmsg->ToAccount, 0, sizeof( txnmsg->ToAccount ) );
	strcpy( txnmsg->ToAccount, ToAccount );
	memset( txnmsg->RefNum, 0, sizeof( txnmsg->RefNum ) );
	strcpy( txnmsg->RefNum, RefNum );
	txnmsg->AuthCode = AuthCode;
	memset( txnmsg->AcceptorName, 0, sizeof( txnmsg->AcceptorName ) );
	strcpy( txnmsg->AcceptorName, AcceptorName );
	memset( txnmsg->AcquirerInst, 0, sizeof( txnmsg->AcquirerInst ) );
	strcpy( txnmsg->AcquirerInst, AcquirerInst );
	memset( txnmsg->IssuerInst, 0, sizeof( txnmsg->IssuerInst ) );
	strcpy( txnmsg->IssuerInst, IssuerInst );
	memset( txnmsg->ForwardInst, 0, sizeof( txnmsg->ForwardInst ) );
	strcpy( txnmsg->ForwardInst, ForwardInst );
	memset( txnmsg->AcquirerBin, 0, sizeof( txnmsg->AcquirerBin ) );
	strcpy( txnmsg->AcquirerBin, AcquirerBin );
	memset( txnmsg->IssuerBin, 0, sizeof( txnmsg->IssuerBin ) );
	strcpy( txnmsg->IssuerBin, IssuerBin );
	memset( txnmsg->ForwardBin, 0, sizeof( txnmsg->ForwardBin ) );
	strcpy( txnmsg->ForwardBin, ForwardBin );
	memset( txnmsg->Track2, 0, sizeof( txnmsg->Track2 ) );
	strcpy( txnmsg->Track2, Track2 );
	memset( txnmsg->RsvFld1, 0, sizeof( txnmsg->RsvFld1 ) );
	strcpy( txnmsg->RsvFld1, RsvFld1 );
	memset( txnmsg->RsvFld2, 0, sizeof( txnmsg->RsvFld2 ) );
	strcpy( txnmsg->RsvFld2, RsvFld2 );
	memset( txnmsg->RsvFld3, 0, sizeof( txnmsg->RsvFld3 ) );
	strcpy( txnmsg->RsvFld3, RsvFld3 );
	memset( txnmsg->RsvFld4, 0, sizeof( txnmsg->RsvFld4 ) );
	strcpy( txnmsg->RsvFld4, RsvFld4 );
	memset( txnmsg->RsvFld5, 0, sizeof( txnmsg->RsvFld5 ) );
	strcpy( txnmsg->RsvFld5, RsvFld5 );
	memset( txnmsg->RsvFld6, 0, sizeof( txnmsg->RsvFld6 ) );
	strcpy( txnmsg->RsvFld6, RsvFld6 );
	memset( txnmsg->OrgChannel, 0, sizeof( txnmsg->OrgChannel ) );
	strcpy( txnmsg->OrgChannel, OrgChannel );
	memset( txnmsg->OrgPort, 0, sizeof( txnmsg->OrgPort ) );
	strcpy( txnmsg->OrgPort, OrgPort );

	return 0;
}

int InsertEzTxnLog( struct EzTxnMsg *txnmsg, const char *I_TxnRefNum )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char TxnRefNum[ 151 ];
		int MsgType;
		int OrgMsgType;
		int TxnCode;
		char TerminalId[ 17 ];
		char TermLoc[ 65 ];
		int TraceNo;
		int OrgTraceNo;
		int TranDate;
		int TranTime;
		int OrgTranDate;
		int OrgTranTime;
		int LocalDate;
		int LocalTime;
		int RespCode;
		int RevCode;
		int ReasonCode;
		int CaptureDate;
		int CaptureTime;
		int SettlementDate;
		int AcqCurrencyCode;
		int AcqConvRate;
		int AcqConvDate;
		int IssCurrencyCode;
		int IssConvRate;
		int IssConvDate;
		int SettCurrencyCode;
		int SettConvRate;
		int SettConvDate;
		int MerchantType;
		int PosEntryCode;
		int PosConditionCode;
		int PosCapCode;
		char PosPinCapCode;
		char CHN[ 20 ];
		char AcqBranchCode[ 11 ];
		char IssBranchCode[ 11 ];
		char ForwardBranchCode[ 11 ];
		char FromAcctType[ 11 ];
		char FromAcctSubType[ 11 ];
		char ToAcctType[ 11 ];
		char ToAcctSubType[ 11 ];
		char AvailBalance[ 15 ];
		char LedgerBalance[ 15 ];
		char Amount[ 15 ];
		char TxnFee[ 15 ];
		char DispAmount[ 15 ];
		char FromAccount[ 33 ];
		char ToAccount[ 33 ];
		char RefNum[ 13 ];
		int  AuthCode;
		char AcceptorName[ 41 ];
		char AcquirerInst[ 11 ];
		char IssuerInst[ 11 ];
		char ForwardInst[ 11 ];
		char AcquirerBin[ 11 ];
		char IssuerBin[ 11 ];
		char ForwardBin[ 11 ];
		char Track2[ 40 ];
		char RsvFld1[ 50 ];
		char RsvFld2[ 50 ];
		char RsvFld3[ 50 ];
		char RsvFld4[ 50 ];
		char RsvFld5[ 50 ];
		char RsvFld6[ 50 ];
		char OrgChannel[ 33 ];
		char OrgPort[ 33 ];
		short ind_var;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR TxnRefNum IS STRING(151);
	EXEC SQL VAR TerminalId IS STRING(17);
	EXEC SQL VAR TermLoc IS STRING(65);
	EXEC SQL VAR CHN IS STRING(20);
	EXEC SQL VAR AcqBranchCode IS STRING(11);
	EXEC SQL VAR IssBranchCode IS STRING(11);
	EXEC SQL VAR ForwardBranchCode IS STRING(11);
	EXEC SQL VAR FromAcctType IS STRING(11);
	EXEC SQL VAR FromAcctSubType IS STRING(11);
	EXEC SQL VAR ToAcctType IS STRING(11);
	EXEC SQL VAR ToAcctSubType IS STRING(11);
	EXEC SQL VAR AvailBalance IS STRING(11);
	EXEC SQL VAR LedgerBalance IS STRING(11);
	EXEC SQL VAR Amount IS STRING(15);
	EXEC SQL VAR TxnFee IS STRING(15);
	EXEC SQL VAR DispAmount IS STRING(15);
	EXEC SQL VAR FromAccount IS STRING(33);
	EXEC SQL VAR ToAccount IS STRING(33);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcceptorName IS STRING(41);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcquirerInst IS STRING(11);
	EXEC SQL VAR IssuerInst IS STRING(11);
	EXEC SQL VAR ForwardInst IS STRING(11);
	EXEC SQL VAR AcquirerBin IS STRING(11);
	EXEC SQL VAR IssuerBin IS STRING(11);
	EXEC SQL VAR ForwardBin IS STRING(11);
	EXEC SQL VAR Track2 IS STRING(40);
	EXEC SQL VAR RsvFld1 IS STRING(50);
	EXEC SQL VAR RsvFld2 IS STRING(50);
	EXEC SQL VAR RsvFld3 IS STRING(50);
	EXEC SQL VAR RsvFld4 IS STRING(50);
	EXEC SQL VAR RsvFld5 IS STRING(50);
	EXEC SQL VAR RsvFld6 IS STRING(50);
	EXEC SQL VAR OrgChannel IS STRING(33);
	EXEC SQL VAR OrgPort IS STRING(33);

	memset( TxnRefNum, 0, sizeof( TxnRefNum ) );
	memset( TerminalId, 0, sizeof( TerminalId ) );
	memset( TermLoc, 0, sizeof( TermLoc ) );
	memset( CHN, 0, sizeof( CHN ) );
	memset( AcqBranchCode, 0, sizeof( AcqBranchCode ) );
	memset( IssBranchCode, 0, sizeof( IssBranchCode ) );
	memset( ForwardBranchCode, 0, sizeof( ForwardBranchCode ) );
	memset( FromAcctType, 0, sizeof( FromAcctType ) );
	memset( FromAcctSubType, 0, sizeof( FromAcctSubType ) );
	memset( ToAcctType, 0, sizeof( ToAcctType ) );
	memset( ToAcctSubType, 0, sizeof( ToAcctSubType ) );
	memset( Amount, 0, sizeof( Amount ) );
	memset( DispAmount, 0, sizeof( DispAmount ) );
	memset( FromAccount, 0, sizeof( FromAccount ) );
	memset( ToAccount, 0, sizeof( ToAccount ) );
	memset( RefNum, 0, sizeof( RefNum ) );
	memset( AcquirerInst, 0, sizeof( AcquirerInst ) );
	memset( IssuerInst, 0, sizeof( IssuerInst ) );
	memset( ForwardInst, 0, sizeof( ForwardInst ) );
	memset( AcquirerBin, 0, sizeof( AcquirerBin ) );
	memset( IssuerBin, 0, sizeof( IssuerBin ) );
	memset( ForwardBin, 0, sizeof( ForwardBin ) );
	memset( Track2, 0, sizeof( Track2 ) );
	memset( RsvFld1, 0, sizeof( RsvFld1 ) );
	memset( RsvFld2, 0, sizeof( RsvFld2 ) );
	memset( RsvFld3, 0, sizeof( RsvFld3 ) );
	memset( RsvFld4, 0, sizeof( RsvFld4 ) );
	memset( RsvFld5, 0, sizeof( RsvFld5 ) );
	memset( RsvFld6, 0, sizeof( RsvFld6 ) );
	memset( OrgChannel, 0, sizeof( OrgChannel ) );
	memset( OrgPort, 0, sizeof( OrgPort ) );
	
	strcpy( TxnRefNum, I_TxnRefNum );
	MsgType = txnmsg->MsgType;
	OrgMsgType = txnmsg->OrgMsgType;
	TxnCode = txnmsg->TxnCode;
	strcpy( TerminalId, txnmsg->TerminalId);
	strcpy( TermLoc, txnmsg->TerminalLocation );
	TraceNo = txnmsg->TraceNo;
	OrgTraceNo = txnmsg->OrgTraceNo;
	TranDate = txnmsg->TranDate;	 
	TranTime = txnmsg->TranTime;
	OrgTranDate = txnmsg->OrgTranDate;
	OrgTranTime = txnmsg->OrgTranTime;
	LocalDate = txnmsg->LocalDate;
	LocalTime = txnmsg->LocalTime;
	RespCode = txnmsg->RespCode;
	RevCode = txnmsg->RevCode;
	ReasonCode = txnmsg->ReasonCode;
	CaptureDate = txnmsg->CaptureDate;
	CaptureTime = txnmsg->CaptureTime;
	SettlementDate = txnmsg->SettlementDate;
	AcqCurrencyCode = txnmsg->AcqCurrencyCode;
	IssCurrencyCode = txnmsg->IssCurrencyCode;
	SettCurrencyCode = txnmsg->SettCurrencyCode;
	AcqConvRate = txnmsg->AcqConvRate;
	AcqConvDate = txnmsg->AcqConvDate;
	IssConvRate = txnmsg->IssConvRate;
	IssConvDate = txnmsg->IssConvDate;
	SettConvRate = txnmsg->SettConvRate;
	SettConvDate = txnmsg->SettConvDate;
	MerchantType = txnmsg->MerchantType;
	PosEntryCode = txnmsg->PosEntryCode;
	PosConditionCode = txnmsg->PosConditionCode;
	PosCapCode = txnmsg->PosCapCode;
	PosPinCapCode = txnmsg->PosPinCapCode;
	strcpy( CHN, txnmsg->chn );
	strcpy( AcqBranchCode, txnmsg->AcqBranchCode );
	strcpy( IssBranchCode, txnmsg->IssBranchCode );
	strcpy( ForwardBranchCode, txnmsg->ForwardBranchCode );
	strcpy( FromAcctType, txnmsg->FromAcctType );
	strcpy( FromAcctSubType, txnmsg->FromAcctSubType );
	strcpy( ToAcctType, txnmsg->ToAcctType );
	strcpy( ToAcctSubType, txnmsg->ToAcctSubType );
	strcpy( AvailBalance, txnmsg->AvailBalance );
	strcpy( LedgerBalance, txnmsg->LedgerBalance );
	strcpy( Amount, txnmsg->Amount );
	strcpy( TxnFee, txnmsg->TxnFee );
	strcpy( DispAmount, txnmsg->DispAmount );
	strcpy( FromAccount, txnmsg->FromAccount );
	strcpy( ToAccount, txnmsg->ToAccount );
	strcpy( RefNum, txnmsg->RefNum );
	AuthCode = txnmsg->AuthCode;
	strcpy( AcceptorName, txnmsg->AcceptorName );
	strcpy( AcquirerInst, txnmsg->AcquirerInst );
	strcpy( IssuerInst, txnmsg->IssuerInst );
	strcpy( ForwardInst, txnmsg->ForwardInst );
	strcpy( AcquirerBin, txnmsg->AcquirerBin );
	strcpy( IssuerBin, txnmsg->IssuerBin );
	strcpy( ForwardBin, txnmsg->ForwardBin );
	strcpy( Track2, txnmsg->Track2 );
	strcpy( RsvFld1, txnmsg->RsvFld1 );
	strcpy( RsvFld2, txnmsg->RsvFld2 );
	strcpy( RsvFld3, txnmsg->RsvFld3 );
	strcpy( RsvFld4, txnmsg->RsvFld4 );
	strcpy( RsvFld5, txnmsg->RsvFld5 );
	strcpy( RsvFld6, txnmsg->RsvFld6 );
	strcpy( OrgChannel, txnmsg->OrgChannel );
	strcpy( OrgPort, txnmsg->OrgPort );

	EXEC SQL INSERT INTO EZTXNLOG (
		TXNREFNUM,
		MSGTYPE,
		ORGMSGTYPE,
		TXNCODE,
		TERMINALID,
		TERMLOC,
		TRACENO,
		ORGTRACENO,
		TRANDATE,
		TRANTIME,
		ORGTRANDATE,
		ORGTRANTIME,
		LOCALDATE,
		LOCALTIME,
		RESPCODE,
		REVCODE,
		REASONCODE,
		CAPTUREDATE,
		CAPTURETIME,
		SETTLEMENTDATE,
		ACQCURRENCYCODE,
		ACQCONVRATE,
		ACQCONVDATE,
		ISSCURRENCYCODE,
		ISSCONVRATE,
		ISSCONVDATE,
		SETTCURRENCYCODE,
		SETTCONVRATE,
		SETTCONVDATE,
		MERCHANTTYPE,
		POSENTRYCODE,
		POSCONDITIONCODE,
		POSCAPCODE,
		POSPINCAPCODE,
		CHN,
		ACQBRANCHCODE,
		ISSBRANCHCODE,
		FORWARDBRANCHCODE,
		FROMACCTTYPE,
		FROMACCTSUBTYPE,
		TOACCTTYPE,
		TOACCTSUBTYPE,
		AVAILBALANCE,
		LEDGERBALANCE,
		AMOUNT,
		TXNFEE,
		DISPAMOUNT,
		FROMACCOUNT,
		TOACCOUNT,
		REFNUM,
		AUTHCODE,
		ACCEPTORNAME,
		ACQUIRERINST,
		ISSUERINST,
		FORWARDINST,
		ACQUIRERBIN,
		ISSUERBIN,
		FORWARDBIN,
		TRACK2,
		RSVFLD1,
		RSVFLD2,
		RSVFLD3,
		RSVFLD4,
		RSVFLD5,
		RSVFLD6,
		ORGCHANNEL,
		ORGPORT
		)
		VALUES(
		:TxnRefNum,
		:MsgType,
		:OrgMsgType:ind_var,
		:TxnCode,
		:TerminalId,
		:TermLoc:ind_var,
		:TraceNo,
		:OrgTraceNo:ind_var,
		:TranDate,
		:TranTime,
		:OrgTranDate:ind_var,
		:OrgTranTime:ind_var,
		:LocalDate,
		:LocalTime,
		:RespCode,
		:RevCode:ind_var,
		:ReasonCode:ind_var,
		:CaptureDate:ind_var,
		:CaptureTime:ind_var,
		:SettlementDate:ind_var,
		:AcqCurrencyCode,
		:AcqConvRate:ind_var,
		:AcqConvDate:ind_var,
		:IssCurrencyCode,
		:IssConvRate:ind_var,
		:IssConvDate:ind_var,
		:SettCurrencyCode:ind_var,
		:SettConvRate:ind_var,
		:SettConvDate:ind_var,
		:MerchantType,
		:PosEntryCode:ind_var,
		:PosConditionCode:ind_var,
		:PosCapCode:ind_var,
		:PosPinCapCode:ind_var,
		:CHN,
		:AcqBranchCode,
		:IssBranchCode,
		:ForwardBranchCode:ind_var,
		:FromAcctType:ind_var,
		:FromAcctSubType:ind_var,
		:ToAcctType:ind_var,
		:ToAcctSubType:ind_var,
		:AvailBalance:ind_var,
		:LedgerBalance:ind_var,
		:Amount:ind_var,
		:TxnFee:ind_var,
		:DispAmount:ind_var,
		:FromAccount:ind_var,
		:ToAccount:ind_var,
		:RefNum:ind_var,
		:AuthCode:ind_var,
		:AcceptorName:ind_var,
		:AcquirerInst,
		:IssuerInst,
		:ForwardInst:ind_var,
		:AcquirerBin,
		:IssuerBin,
		:ForwardBin:ind_var,
		:Track2:ind_var,
		:RsvFld1:ind_var,
		:RsvFld2:ind_var,
		:RsvFld3:ind_var,
		:RsvFld4:ind_var,
		:RsvFld5:ind_var,
		:RsvFld6:ind_var,
		:OrgChannel,
		:OrgPort
		);
	if( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	else
	{
		EXEC SQL COMMIT;
	    	return 0;
	}
}

int UpdateEzTxnLog( struct EzTxnMsg *txnmsg, const char *I_TxnRefNum )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char TxnRefNum[ 151 ];
		int MsgType;
		int OrgMsgType;
		int TxnCode;
		char TerminalId[ 17 ];
		char TermLoc[ 65 ];
		int TraceNo;
		int OrgTraceNo;
		int TranDate;
		int TranTime;
		int OrgTranDate;
		int OrgTranTime;
		int LocalDate;
		int LocalTime;
		int RespCode;
		int RevCode;
		int ReasonCode;
		int CaptureDate;
		int CaptureTime;
		int SettlementDate;
		int AcqCurrencyCode;
		int AcqConvRate;
		int AcqConvDate;
		int IssCurrencyCode;
		int IssConvRate;
		int IssConvDate;
		int SettCurrencyCode;
		int SettConvRate;
		int SettConvDate;
		int MerchantType;
		int PosEntryCode;
		int PosConditionCode;
		int PosCapCode;
		char PosPinCapCode;
		char CHN[ 20 ];
		char AcqBranchCode[ 11 ];
		char IssBranchCode[ 11 ];
		char ForwardBranchCode[ 11 ];
		char FromAcctType[ 11 ];
		char FromAcctSubType[ 11 ];
		char ToAcctType[ 11 ];
		char ToAcctSubType[ 11 ];
		char AvailBalance[ 15 ];
		char LedgerBalance[ 15 ];
		char Amount[ 15 ];
		char TxnFee[ 15 ];
		char DispAmount[ 15 ];
		char FromAccount[ 33 ];
		char ToAccount[ 33 ];
		char RefNum[ 13 ];
		int AuthCode;
		char AcceptorName[ 41 ];
		char AcquirerInst[ 11 ];
		char IssuerInst[ 11 ];
		char ForwardInst[ 11 ];
		char AcquirerBin[ 11 ];
		char IssuerBin[ 11 ];
		char ForwardBin[ 11 ];
		char Track2[ 40 ];
		char RsvFld1[ 50 ];
		char RsvFld2[ 50 ];
		char RsvFld3[ 50 ];
		char RsvFld4[ 50 ];
		char RsvFld5[ 50 ];
		char RsvFld6[ 50 ];
		char OrgChannel[ 33 ];
		char OrgPort[ 33 ];
		short ind_var;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL VAR TxnRefNum IS STRING(151);
	EXEC SQL VAR TerminalId IS STRING(17);
	EXEC SQL VAR TermLoc IS STRING(65);
	EXEC SQL VAR CHN IS STRING(20);
	EXEC SQL VAR AcqBranchCode IS STRING(11);
	EXEC SQL VAR IssBranchCode IS STRING(11);
	EXEC SQL VAR ForwardBranchCode IS STRING(11);
	EXEC SQL VAR FromAcctType IS STRING(11);
	EXEC SQL VAR FromAcctSubType IS STRING(11);
	EXEC SQL VAR ToAcctType IS STRING(11);
	EXEC SQL VAR ToAcctSubType IS STRING(11);
	EXEC SQL VAR AvailBalance IS STRING(11);
	EXEC SQL VAR LedgerBalance IS STRING(11);
	EXEC SQL VAR Amount IS STRING(15);
	EXEC SQL VAR TxnFee IS STRING(15);
	EXEC SQL VAR DispAmount IS STRING(15);
	EXEC SQL VAR FromAccount IS STRING(33);
	EXEC SQL VAR ToAccount IS STRING(33);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcceptorName IS STRING(41);
	EXEC SQL VAR RefNum IS STRING(13);
	EXEC SQL VAR AcquirerInst IS STRING(11);
	EXEC SQL VAR IssuerInst IS STRING(11);
	EXEC SQL VAR ForwardInst IS STRING(11);
	EXEC SQL VAR AcquirerBin IS STRING(11);
	EXEC SQL VAR IssuerBin IS STRING(11);
	EXEC SQL VAR ForwardBin IS STRING(11);
	EXEC SQL VAR Track2 IS STRING(40);
	EXEC SQL VAR RsvFld1 IS STRING(50);
	EXEC SQL VAR RsvFld2 IS STRING(50);
	EXEC SQL VAR RsvFld3 IS STRING(50);
	EXEC SQL VAR RsvFld4 IS STRING(50);
	EXEC SQL VAR RsvFld5 IS STRING(50);
	EXEC SQL VAR RsvFld6 IS STRING(50);
	EXEC SQL VAR OrgChannel IS STRING(33);
	EXEC SQL VAR OrgPort IS STRING(33);

	memset( TxnRefNum, 0, sizeof( TxnRefNum ) );
	memset( TerminalId, 0, sizeof( TerminalId ) );
	memset( TermLoc, 0, sizeof( TermLoc ) );
	memset( CHN, 0, sizeof( CHN ) );
	memset( AcqBranchCode, 0, sizeof( AcqBranchCode ) );
	memset( IssBranchCode, 0, sizeof( IssBranchCode ) );
	memset( ForwardBranchCode, 0, sizeof( ForwardBranchCode ) );
	memset( FromAcctType, 0, sizeof( FromAcctType ) );
	memset( FromAcctSubType, 0, sizeof( FromAcctSubType ) );
	memset( ToAcctType, 0, sizeof( ToAcctType ) );
	memset( ToAcctSubType, 0, sizeof( ToAcctSubType ) );
	memset( Amount, 0, sizeof( Amount ) );
	memset( DispAmount, 0, sizeof( DispAmount ) );
	memset( FromAccount, 0, sizeof( FromAccount ) );
	memset( ToAccount, 0, sizeof( ToAccount ) );
	memset( RefNum, 0, sizeof( RefNum ) );
	memset( AcquirerInst, 0, sizeof( AcquirerInst ) );
	memset( IssuerInst, 0, sizeof( IssuerInst ) );
	memset( ForwardInst, 0, sizeof( ForwardInst ) );
	memset( AcquirerBin, 0, sizeof( AcquirerBin ) );
	memset( IssuerBin, 0, sizeof( IssuerBin ) );
	memset( ForwardBin, 0, sizeof( ForwardBin ) );
	memset( Track2, 0, sizeof( Track2 ) );
	memset( RsvFld1, 0, sizeof( RsvFld1 ) );
	memset( RsvFld2, 0, sizeof( RsvFld2 ) );
	memset( RsvFld3, 0, sizeof( RsvFld3 ) );
	memset( RsvFld4, 0, sizeof( RsvFld4 ) );
	memset( RsvFld5, 0, sizeof( RsvFld5 ) );
	memset( RsvFld6, 0, sizeof( RsvFld6 ) );
	memset( OrgChannel, 0, sizeof( OrgChannel ) );
	memset( OrgPort, 0, sizeof( OrgPort ) );
	
	strcpy( TxnRefNum, I_TxnRefNum );
	MsgType = txnmsg->MsgType;
	OrgMsgType = txnmsg->OrgMsgType;
	TxnCode = txnmsg->TxnCode;
	strcpy( TerminalId, txnmsg->TerminalId);
	strcpy( TermLoc, txnmsg->TerminalLocation );
	TraceNo = txnmsg->TraceNo;
	OrgTraceNo = txnmsg->OrgTraceNo;
	TranDate = txnmsg->TranDate;	 
	TranTime = txnmsg->TranTime;
	OrgTranDate = txnmsg->OrgTranDate;
	OrgTranTime = txnmsg->OrgTranTime;
	LocalDate = txnmsg->LocalDate;
	LocalTime = txnmsg->LocalTime;
	RespCode = txnmsg->RespCode;
	RevCode = txnmsg->RevCode;
	ReasonCode = txnmsg->ReasonCode;
	CaptureDate = txnmsg->CaptureDate;
	CaptureTime = txnmsg->CaptureTime;
	SettlementDate = txnmsg->SettlementDate;
	AcqCurrencyCode = txnmsg->AcqCurrencyCode;
	IssCurrencyCode = txnmsg->IssCurrencyCode;
	SettCurrencyCode = txnmsg->SettCurrencyCode;
	AcqConvRate = txnmsg->AcqConvRate;
	AcqConvDate = txnmsg->AcqConvDate;
	IssConvRate = txnmsg->IssConvRate;
	IssConvDate = txnmsg->IssConvDate;
	SettConvRate = txnmsg->SettConvRate;
	SettConvDate = txnmsg->SettConvDate;
	MerchantType = txnmsg->MerchantType;
	PosEntryCode = txnmsg->PosEntryCode;
	PosConditionCode = txnmsg->PosConditionCode;
	PosCapCode = txnmsg->PosCapCode;
	PosPinCapCode = txnmsg->PosPinCapCode;
	strcpy( CHN, txnmsg->chn);
	strcpy( AcqBranchCode, txnmsg->AcqBranchCode);
	strcpy( IssBranchCode, txnmsg->IssBranchCode);
	strcpy( ForwardBranchCode, txnmsg->ForwardBranchCode);
	strcpy( FromAcctType, txnmsg->FromAcctType);
	strcpy( FromAcctSubType, txnmsg->FromAcctSubType);
	strcpy( ToAcctType, txnmsg->ToAcctType);
	strcpy( ToAcctSubType, txnmsg->ToAcctSubType);
	strcpy( AvailBalance, txnmsg->AvailBalance);
	strcpy( LedgerBalance, txnmsg->LedgerBalance);
	strcpy( Amount, txnmsg->Amount);
	strcpy( TxnFee, txnmsg->TxnFee);
	strcpy( DispAmount, txnmsg->DispAmount);
	strcpy( FromAccount, txnmsg->FromAccount);
	strcpy( ToAccount, txnmsg->ToAccount);
	strcpy( RefNum, txnmsg->RefNum);
	AuthCode = txnmsg->AuthCode;
	strcpy( AcceptorName, txnmsg->AcceptorName);
	strcpy( AcquirerInst, txnmsg->AcquirerInst);
	strcpy( IssuerInst, txnmsg->IssuerInst);
	strcpy( ForwardInst, txnmsg->ForwardInst);
	strcpy( AcquirerBin, txnmsg->AcquirerBin);
	strcpy( IssuerBin, txnmsg->IssuerBin);
	strcpy( ForwardBin, txnmsg->ForwardBin);
	strcpy( Track2, txnmsg->Track2);
	strcpy( RsvFld1, txnmsg->RsvFld1);
	strcpy( RsvFld2, txnmsg->RsvFld2);
	strcpy( RsvFld3, txnmsg->RsvFld3);
	strcpy( RsvFld4, txnmsg->RsvFld4);
	strcpy( RsvFld5, txnmsg->RsvFld5);
	strcpy( RsvFld6, txnmsg->RsvFld6);
	strcpy( OrgChannel, txnmsg->OrgChannel );
	strcpy( OrgPort, txnmsg->OrgPort );

	EXEC SQL UPDATE INTO EZTXNLOG SET
		TXNREFNUM = :TxnRefNum,
		MSGTYPE = :MsgType,
		ORGMSGTYPE = :OrgMsgType,
		TERMLOC = :TermLoc,
		ORGTRACENO = :OrgTraceNo,
		TRANDATE = :TranDate,
		TRANTIME = :TranTime,
		ORGTRANDATE = :OrgTranDate,
		ORGTRANTIME = :OrgTranTime,
		RESPCODE = :RespCode,
		REVCODE = :RevCode,
		REASONCODE = :ReasonCode,
		CAPTUREDATE = :CaptureDate,
		CAPTURETIME = :CaptureTime,
		SETTLEMENTDATE = :SettlementDate,
		ACQCURRENCYCODE = :AcqCurrencyCode,
		ACQCONVRATE = :AcqConvRate,
		ACQCONVDATE = :AcqConvDate,
		ISSCURRENCYCODE = :IssCurrencyCode,
		ISSCONVRATE = :IssConvRate,
		ISSCONVDATE = :IssConvDate,
		SETTCURRENCYCODE = :SettCurrencyCode,
		SETTCONVRATE = :SettConvRate,
		SETTCONVDATE = :SettConvDate,
		MERCHANTTYPE = :MerchantType,
		POSENTRYCODE = :PosEntryCode,
		POSCONDITIONCODE = :PosConditionCode,
		POSCAPCODE = :PosCapCode,
		POSPINCAPCODE = :PosPinCapCode,
		ACQBRANCHCODE = :AcqBranchCode,
		ISSBRANCHCODE = :IssBranchCode,
		FORWARDBRANCHCODE = :ForwardBranchCode,
		FROMACCTTYPE = :FromAcctType,
		FROMACCTSUBTYPE = :FromAcctSubType,
		TOACCTTYPE = :ToAcctType,
		TOACCTSUBTYPE = :ToAcctSubType,
		AVAILBALANCE = :AvailBalance,
		LEDGERBALANCE = :LedgerBalance,
		AMOUNT = :Amount,
		TXNFEE = :TxnFee,
		DISPAMOUNT = :DispAmount,
		FROMACCOUNT = :FromAccount,
		TOACCOUNT = :ToAccount,
		REFNUM = :RefNum,
		AUTHCODE = :AuthCode,
		ACCEPTORNAME = :AcceptorName,
		ACQUIRERINST = :AcquirerInst,
		ISSUERINST = :IssuerInst,
		FORWARDINST = :ForwardInst,
		ACQUIRERBIN = :AcquirerBin,
		ISSUERBIN = :IssuerBin,
		FORWARDBIN = :ForwardBin,
		TRACK2 = :Track2,
		RSVFLD1 = :RsvFld1,
		RSVFLD2 = :RsvFld2,
		RSVFLD3 = :RsvFld3,
		RSVFLD4 = :RsvFld4,
		RSVFLD5 = :RsvFld5,
		RSVFLD6 = :RsvFld6,
		ORGCHANNEL = :OrgChannel,
		ORGPORT = :OrgPort
	WHERE RTRIM(TXNREFNUM)=:TxnRefNum;

	if( sqlca.sqlcode != 0 )
		return sqlca.sqlcode;
	else
	{
		EXEC SQL COMMIT;
	    return 0;
	}
}

